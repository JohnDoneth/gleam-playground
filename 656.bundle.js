"use strict";(self.webpackChunkgleam_playground=self.webpackChunkgleam_playground||[]).push([[656],{4386:(e,n,t)=>{t.r(n),t.d(n,{conf:()=>i,language:()=>o});var i={wordPattern:/(-?\d*\.\d\w*)|([^\`\~\!\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"},{open:"<",close:">"}],folding:{markers:{start:new RegExp("^\\s*//\\s*(?:(?:#?region\\b)|(?:<editor-fold\\b))"),end:new RegExp("^\\s*//\\s*(?:(?:#?endregion\\b)|(?:</editor-fold>))")}}},r=[];["abstract","activate","and","any","array","as","asc","assert","autonomous","begin","bigdecimal","blob","boolean","break","bulk","by","case","cast","catch","char","class","collect","commit","const","continue","convertcurrency","decimal","default","delete","desc","do","double","else","end","enum","exception","exit","export","extends","false","final","finally","float","for","from","future","get","global","goto","group","having","hint","if","implements","import","in","inner","insert","instanceof","int","interface","into","join","last_90_days","last_month","last_n_days","last_week","like","limit","list","long","loop","map","merge","native","new","next_90_days","next_month","next_n_days","next_week","not","null","nulls","number","object","of","on","or","outer","override","package","parallel","pragma","private","protected","public","retrieve","return","returning","rollback","savepoint","search","select","set","short","sort","stat","static","strictfp","super","switch","synchronized","system","testmethod","then","this","this_month","this_week","throw","throws","today","tolabel","tomorrow","transaction","transient","trigger","true","try","type","undelete","update","upsert","using","virtual","void","volatile","webservice","when","where","while","yesterday"].forEach((function(e){r.push(e),r.push(e.toUpperCase()),r.push(function(e){return e.charAt(0).toUpperCase()+e.substr(1)}(e))}));var o={defaultToken:"",tokenPostfix:".apex",keywords:r,operators:["=",">","<","!","~","?",":","==","<=",">=","!=","&&","||","++","--","+","-","*","/","&","|","^","%","<<",">>",">>>","+=","-=","*=","/=","&=","|=","^=","%=","<<=",">>=",">>>="],symbols:/[=><!~?:&|+\-*\/\^%]+/,escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,digits:/\d+(_+\d+)*/,octaldigits:/[0-7]+(_+[0-7]+)*/,binarydigits:/[0-1]+(_+[0-1]+)*/,hexdigits:/[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,tokenizer:{root:[[/[a-z_$][\w$]*/,{cases:{"@keywords":{token:"keyword.$0"},"@default":"identifier"}}],[/[A-Z][\w\$]*/,{cases:{"@keywords":{token:"keyword.$0"},"@default":"type.identifier"}}],{include:"@whitespace"},[/[{}()\[\]]/,"@brackets"],[/[<>](?!@symbols)/,"@brackets"],[/@symbols/,{cases:{"@operators":"delimiter","@default":""}}],[/@\s*[a-zA-Z_\$][\w\$]*/,"annotation"],[/(@digits)[eE]([\-+]?(@digits))?[fFdD]?/,"number.float"],[/(@digits)\.(@digits)([eE][\-+]?(@digits))?[fFdD]?/,"number.float"],[/(@digits)[fFdD]/,"number.float"],[/(@digits)[lL]?/,"number"],[/[;,.]/,"delimiter"],[/"([^"\\]|\\.)*$/,"string.invalid"],[/'([^'\\]|\\.)*$/,"string.invalid"],[/"/,"string",'@string."'],[/'/,"string","@string.'"],[/'[^\\']'/,"string"],[/(')(@escapes)(')/,["string","string.escape","string"]],[/'/,"string.invalid"]],whitespace:[[/[ \t\r\n]+/,""],[/\/\*\*(?!\/)/,"comment.doc","@apexdoc"],[/\/\*/,"comment","@comment"],[/\/\/.*$/,"comment"]],comment:[[/[^\/*]+/,"comment"],[/\*\//,"comment","@pop"],[/[\/*]/,"comment"]],apexdoc:[[/[^\/*]+/,"comment.doc"],[/\*\//,"comment.doc","@pop"],[/[\/*]/,"comment.doc"]],string:[[/[^\\"']+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/["']/,{cases:{"$#==$S2":{token:"string",next:"@pop"},"@default":"string"}}]]}}},3036:(e,n,t)=>{t.r(n),t.d(n,{conf:()=>i,language:()=>r});var i={comments:{lineComment:";;"},brackets:[["[","]"],["(",")"],["{","}"]],autoClosingPairs:[{open:"[",close:"]"},{open:'"',close:'"'},{open:"(",close:")"},{open:"{",close:"}"}],surroundingPairs:[{open:"[",close:"]"},{open:'"',close:'"'},{open:"(",close:")"},{open:"{",close:"}"}]},r={defaultToken:"",ignoreCase:!0,tokenPostfix:".clj",brackets:[{open:"[",close:"]",token:"delimiter.square"},{open:"(",close:")",token:"delimiter.parenthesis"},{open:"{",close:"}",token:"delimiter.curly"}],constants:["true","false","nil"],numbers:/^(?:[+\-]?\d+(?:(?:N|(?:[eE][+\-]?\d+))|(?:\.?\d*(?:M|(?:[eE][+\-]?\d+))?)|\/\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\[\]\s"#'(),;@^`{}~]|$))/,characters:/^(?:\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\[\]\s"(),;@^`{}~]|$))/,escapes:/^\\(?:["'\\bfnrt]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,qualifiedSymbols:/^(?:(?:[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*(?:\.[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)*\/)?(?:\/|[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)*(?=[\\\[\]\s"(),;@^`{}~]|$))/,specialForms:[".","catch","def","do","if","monitor-enter","monitor-exit","new","quote","recur","set!","throw","try","var"],coreSymbols:["*","*'","*1","*2","*3","*agent*","*allow-unresolved-vars*","*assert*","*clojure-version*","*command-line-args*","*compile-files*","*compile-path*","*compiler-options*","*data-readers*","*default-data-reader-fn*","*e","*err*","*file*","*flush-on-newline*","*fn-loader*","*in*","*math-context*","*ns*","*out*","*print-dup*","*print-length*","*print-level*","*print-meta*","*print-namespace-maps*","*print-readably*","*read-eval*","*reader-resolver*","*source-path*","*suppress-read*","*unchecked-math*","*use-context-classloader*","*verbose-defrecords*","*warn-on-reflection*","+","+'","-","-'","->","->>","->ArrayChunk","->Eduction","->Vec","->VecNode","->VecSeq","-cache-protocol-fn","-reset-methods","..","/","<","<=","=","==",">",">=","EMPTY-NODE","Inst","StackTraceElement->vec","Throwable->map","accessor","aclone","add-classpath","add-watch","agent","agent-error","agent-errors","aget","alength","alias","all-ns","alter","alter-meta!","alter-var-root","amap","ancestors","and","any?","apply","areduce","array-map","as->","aset","aset-boolean","aset-byte","aset-char","aset-double","aset-float","aset-int","aset-long","aset-short","assert","assoc","assoc!","assoc-in","associative?","atom","await","await-for","await1","bases","bean","bigdec","bigint","biginteger","binding","bit-and","bit-and-not","bit-clear","bit-flip","bit-not","bit-or","bit-set","bit-shift-left","bit-shift-right","bit-test","bit-xor","boolean","boolean-array","boolean?","booleans","bound-fn","bound-fn*","bound?","bounded-count","butlast","byte","byte-array","bytes","bytes?","case","cast","cat","char","char-array","char-escape-string","char-name-string","char?","chars","chunk","chunk-append","chunk-buffer","chunk-cons","chunk-first","chunk-next","chunk-rest","chunked-seq?","class","class?","clear-agent-errors","clojure-version","coll?","comment","commute","comp","comparator","compare","compare-and-set!","compile","complement","completing","concat","cond","cond->","cond->>","condp","conj","conj!","cons","constantly","construct-proxy","contains?","count","counted?","create-ns","create-struct","cycle","dec","dec'","decimal?","declare","dedupe","default-data-readers","definline","definterface","defmacro","defmethod","defmulti","defn","defn-","defonce","defprotocol","defrecord","defstruct","deftype","delay","delay?","deliver","denominator","deref","derive","descendants","destructure","disj","disj!","dissoc","dissoc!","distinct","distinct?","doall","dorun","doseq","dosync","dotimes","doto","double","double-array","double?","doubles","drop","drop-last","drop-while","eduction","empty","empty?","ensure","ensure-reduced","enumeration-seq","error-handler","error-mode","eval","even?","every-pred","every?","ex-data","ex-info","extend","extend-protocol","extend-type","extenders","extends?","false?","ffirst","file-seq","filter","filterv","find","find-keyword","find-ns","find-protocol-impl","find-protocol-method","find-var","first","flatten","float","float-array","float?","floats","flush","fn","fn?","fnext","fnil","for","force","format","frequencies","future","future-call","future-cancel","future-cancelled?","future-done?","future?","gen-class","gen-interface","gensym","get","get-in","get-method","get-proxy-class","get-thread-bindings","get-validator","group-by","halt-when","hash","hash-combine","hash-map","hash-ordered-coll","hash-set","hash-unordered-coll","ident?","identical?","identity","if-let","if-not","if-some","ifn?","import","in-ns","inc","inc'","indexed?","init-proxy","inst-ms","inst-ms*","inst?","instance?","int","int-array","int?","integer?","interleave","intern","interpose","into","into-array","ints","io!","isa?","iterate","iterator-seq","juxt","keep","keep-indexed","key","keys","keyword","keyword?","last","lazy-cat","lazy-seq","let","letfn","line-seq","list","list*","list?","load","load-file","load-reader","load-string","loaded-libs","locking","long","long-array","longs","loop","macroexpand","macroexpand-1","make-array","make-hierarchy","map","map-entry?","map-indexed","map?","mapcat","mapv","max","max-key","memfn","memoize","merge","merge-with","meta","method-sig","methods","min","min-key","mix-collection-hash","mod","munge","name","namespace","namespace-munge","nat-int?","neg-int?","neg?","newline","next","nfirst","nil?","nnext","not","not-any?","not-empty","not-every?","not=","ns","ns-aliases","ns-imports","ns-interns","ns-map","ns-name","ns-publics","ns-refers","ns-resolve","ns-unalias","ns-unmap","nth","nthnext","nthrest","num","number?","numerator","object-array","odd?","or","parents","partial","partition","partition-all","partition-by","pcalls","peek","persistent!","pmap","pop","pop!","pop-thread-bindings","pos-int?","pos?","pr","pr-str","prefer-method","prefers","primitives-classnames","print","print-ctor","print-dup","print-method","print-simple","print-str","printf","println","println-str","prn","prn-str","promise","proxy","proxy-call-with-super","proxy-mappings","proxy-name","proxy-super","push-thread-bindings","pvalues","qualified-ident?","qualified-keyword?","qualified-symbol?","quot","rand","rand-int","rand-nth","random-sample","range","ratio?","rational?","rationalize","re-find","re-groups","re-matcher","re-matches","re-pattern","re-seq","read","read-line","read-string","reader-conditional","reader-conditional?","realized?","record?","reduce","reduce-kv","reduced","reduced?","reductions","ref","ref-history-count","ref-max-history","ref-min-history","ref-set","refer","refer-clojure","reify","release-pending-sends","rem","remove","remove-all-methods","remove-method","remove-ns","remove-watch","repeat","repeatedly","replace","replicate","require","reset!","reset-meta!","reset-vals!","resolve","rest","restart-agent","resultset-seq","reverse","reversible?","rseq","rsubseq","run!","satisfies?","second","select-keys","send","send-off","send-via","seq","seq?","seqable?","seque","sequence","sequential?","set","set-agent-send-executor!","set-agent-send-off-executor!","set-error-handler!","set-error-mode!","set-validator!","set?","short","short-array","shorts","shuffle","shutdown-agents","simple-ident?","simple-keyword?","simple-symbol?","slurp","some","some->","some->>","some-fn","some?","sort","sort-by","sorted-map","sorted-map-by","sorted-set","sorted-set-by","sorted?","special-symbol?","spit","split-at","split-with","str","string?","struct","struct-map","subs","subseq","subvec","supers","swap!","swap-vals!","symbol","symbol?","sync","tagged-literal","tagged-literal?","take","take-last","take-nth","take-while","test","the-ns","thread-bound?","time","to-array","to-array-2d","trampoline","transduce","transient","tree-seq","true?","type","unchecked-add","unchecked-add-int","unchecked-byte","unchecked-char","unchecked-dec","unchecked-dec-int","unchecked-divide-int","unchecked-double","unchecked-float","unchecked-inc","unchecked-inc-int","unchecked-int","unchecked-long","unchecked-multiply","unchecked-multiply-int","unchecked-negate","unchecked-negate-int","unchecked-remainder-int","unchecked-short","unchecked-subtract","unchecked-subtract-int","underive","unquote","unquote-splicing","unreduced","unsigned-bit-shift-right","update","update-in","update-proxy","uri?","use","uuid?","val","vals","var-get","var-set","var?","vary-meta","vec","vector","vector-of","vector?","volatile!","volatile?","vreset!","vswap!","when","when-first","when-let","when-not","when-some","while","with-bindings","with-bindings*","with-in-str","with-loading-context","with-local-vars","with-meta","with-open","with-out-str","with-precision","with-redefs","with-redefs-fn","xml-seq","zero?","zipmap"],tokenizer:{root:[{include:"@whitespace"},[/@numbers/,"number"],[/@characters/,"string"],{include:"@string"},[/[()\[\]{}]/,"@brackets"],[/\/#"(?:\.|(?:")|[^"\n])*"\/g/,"regexp"],[/[#'@^`~]/,"meta"],[/@qualifiedSymbols/,{cases:{"^:.+$":"constant","@specialForms":"keyword","@coreSymbols":"keyword","@constants":"constant","@default":"identifier"}}]],whitespace:[[/[\s,]+/,"white"],[/;.*$/,"comment"],[/\(comment\b/,"comment","@comment"]],comment:[[/\(/,"comment","@push"],[/\)/,"comment","@pop"],[/[^()]/,"comment"]],string:[[/"/,"string","@multiLineString"]],multiLineString:[[/"/,"string","@popall"],[/@escapes/,"string.escape"],[/./,"string"]]}}},8719:(e,n,t)=>{t.r(n),t.d(n,{conf:()=>i,language:()=>r});var i={wordPattern:/(-?\d*\.\d\w*)|([^\`\~\!\#\$\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:"'",close:"'",notIn:["string","comment"]},{open:'"',close:'"',notIn:["string","comment"]}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:"<",close:">"},{open:"'",close:"'"},{open:'"',close:'"'}],folding:{markers:{start:new RegExp("^\\s*#region\\b"),end:new RegExp("^\\s*#endregion\\b")}}},r={defaultToken:"",tokenPostfix:".cs",brackets:[{open:"{",close:"}",token:"delimiter.curly"},{open:"[",close:"]",token:"delimiter.square"},{open:"(",close:")",token:"delimiter.parenthesis"},{open:"<",close:">",token:"delimiter.angle"}],keywords:["extern","alias","using","bool","decimal","sbyte","byte","short","ushort","int","uint","long","ulong","char","float","double","object","dynamic","string","assembly","is","as","ref","out","this","base","new","typeof","void","checked","unchecked","default","delegate","var","const","if","else","switch","case","while","do","for","foreach","in","break","continue","goto","return","throw","try","catch","finally","lock","yield","from","let","where","join","on","equals","into","orderby","ascending","descending","select","group","by","namespace","partial","class","field","event","method","param","public","protected","internal","private","abstract","sealed","static","struct","readonly","volatile","virtual","override","params","get","set","add","remove","operator","true","false","implicit","explicit","interface","enum","null","async","await","fixed","sizeof","stackalloc","unsafe","nameof","when"],namespaceFollows:["namespace","using"],parenFollows:["if","for","while","switch","foreach","using","catch","when"],operators:["=","??","||","&&","|","^","&","==","!=","<=",">=","<<","+","-","*","/","%","!","~","++","--","+=","-=","*=","/=","%=","&=","|=","^=","<<=",">>=",">>","=>"],symbols:/[=><!~?:&|+\-*\/\^%]+/,escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,tokenizer:{root:[[/\@?[a-zA-Z_]\w*/,{cases:{"@namespaceFollows":{token:"keyword.$0",next:"@namespace"},"@keywords":{token:"keyword.$0",next:"@qualified"},"@default":{token:"identifier",next:"@qualified"}}}],{include:"@whitespace"},[/}/,{cases:{"$S2==interpolatedstring":{token:"string.quote",next:"@pop"},"$S2==litinterpstring":{token:"string.quote",next:"@pop"},"@default":"@brackets"}}],[/[{}()\[\]]/,"@brackets"],[/[<>](?!@symbols)/,"@brackets"],[/@symbols/,{cases:{"@operators":"delimiter","@default":""}}],[/[0-9_]*\.[0-9_]+([eE][\-+]?\d+)?[fFdD]?/,"number.float"],[/0[xX][0-9a-fA-F_]+/,"number.hex"],[/0[bB][01_]+/,"number.hex"],[/[0-9_]+/,"number"],[/[;,.]/,"delimiter"],[/"([^"\\]|\\.)*$/,"string.invalid"],[/"/,{token:"string.quote",next:"@string"}],[/\$\@"/,{token:"string.quote",next:"@litinterpstring"}],[/\@"/,{token:"string.quote",next:"@litstring"}],[/\$"/,{token:"string.quote",next:"@interpolatedstring"}],[/'[^\\']'/,"string"],[/(')(@escapes)(')/,["string","string.escape","string"]],[/'/,"string.invalid"]],qualified:[[/[a-zA-Z_][\w]*/,{cases:{"@keywords":{token:"keyword.$0"},"@default":"identifier"}}],[/\./,"delimiter"],["","","@pop"]],namespace:[{include:"@whitespace"},[/[A-Z]\w*/,"namespace"],[/[\.=]/,"delimiter"],["","","@pop"]],comment:[[/[^\/*]+/,"comment"],["\\*/","comment","@pop"],[/[\/*]/,"comment"]],string:[[/[^\\"]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/"/,{token:"string.quote",next:"@pop"}]],litstring:[[/[^"]+/,"string"],[/""/,"string.escape"],[/"/,{token:"string.quote",next:"@pop"}]],litinterpstring:[[/[^"{]+/,"string"],[/""/,"string.escape"],[/{{/,"string.escape"],[/}}/,"string.escape"],[/{/,{token:"string.quote",next:"root.litinterpstring"}],[/"/,{token:"string.quote",next:"@pop"}]],interpolatedstring:[[/[^\\"{]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/{{/,"string.escape"],[/}}/,"string.escape"],[/{/,{token:"string.quote",next:"root.interpolatedstring"}],[/"/,{token:"string.quote",next:"@pop"}]],whitespace:[[/^[ \t\v\f]*#((r)|(load))(?=\s)/,"directive.csx"],[/^[ \t\v\f]*#\w.*$/,"namespace.cpp"],[/[ \t\v\f\r\n]+/,""],[/\/\*/,"comment","@comment"],[/\/\/.*$/,"comment"]]}}},9343:(e,n,t)=>{t.r(n),t.d(n,{conf:()=>i,language:()=>r});var i={comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:"'",close:"'",notIn:["string","comment"]},{open:'"',close:'"',notIn:["string"]},{open:"`",close:"`",notIn:["string","comment"]},{open:"/**",close:" */",notIn:["string"]}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:"<",close:">"},{open:"'",close:"'"},{open:"(",close:")"},{open:'"',close:'"'},{open:"`",close:"`"}],folding:{markers:{start:/^\s*\s*#?region\b/,end:/^\s*\s*#?endregion\b/}}},r={defaultToken:"invalid",tokenPostfix:".dart",keywords:["abstract","dynamic","implements","show","as","else","import","static","assert","enum","in","super","async","export","interface","switch","await","extends","is","sync","break","external","library","this","case","factory","mixin","throw","catch","false","new","true","class","final","null","try","const","finally","on","typedef","continue","for","operator","var","covariant","Function","part","void","default","get","rethrow","while","deferred","hide","return","with","do","if","set","yield"],typeKeywords:["int","double","String","bool"],operators:["+","-","*","/","~/","%","++","--","==","!=",">","<",">=","<=","=","-=","/=","%=",">>=","^=","+=","*=","~/=","<<=","&=","!=","||","&&","&","|","^","~","<<",">>","!",">>>","??","?",":","|="],symbols:/[=><!~?:&|+\-*\/\^%]+/,escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,digits:/\d+(_+\d+)*/,octaldigits:/[0-7]+(_+[0-7]+)*/,binarydigits:/[0-1]+(_+[0-1]+)*/,hexdigits:/[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,regexpctl:/[(){}\[\]\$\^|\-*+?\.]/,regexpesc:/\\(?:[bBdDfnrstvwWn0\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,tokenizer:{root:[[/[{}]/,"delimiter.bracket"],{include:"common"}],common:[[/[a-z_$][\w$]*/,{cases:{"@typeKeywords":"type.identifier","@keywords":"keyword","@default":"identifier"}}],[/[A-Z_$][\w\$]*/,"type.identifier"],{include:"@whitespace"},[/\/(?=([^\\\/]|\\.)+\/([gimsuy]*)(\s*)(\.|;|,|\)|\]|\}|$))/,{token:"regexp",bracket:"@open",next:"@regexp"}],[/@[a-zA-Z]+/,"annotation"],[/[()\[\]]/,"@brackets"],[/[<>](?!@symbols)/,"@brackets"],[/!(?=([^=]|$))/,"delimiter"],[/@symbols/,{cases:{"@operators":"delimiter","@default":""}}],[/(@digits)[eE]([\-+]?(@digits))?/,"number.float"],[/(@digits)\.(@digits)([eE][\-+]?(@digits))?/,"number.float"],[/0[xX](@hexdigits)n?/,"number.hex"],[/0[oO]?(@octaldigits)n?/,"number.octal"],[/0[bB](@binarydigits)n?/,"number.binary"],[/(@digits)n?/,"number"],[/[;,.]/,"delimiter"],[/"([^"\\]|\\.)*$/,"string.invalid"],[/'([^'\\]|\\.)*$/,"string.invalid"],[/"/,"string","@string_double"],[/'/,"string","@string_single"]],whitespace:[[/[ \t\r\n]+/,""],[/\/\*\*(?!\/)/,"comment.doc","@jsdoc"],[/\/\*/,"comment","@comment"],[/\/\/\/.*$/,"comment.doc"],[/\/\/.*$/,"comment"]],comment:[[/[^\/*]+/,"comment"],[/\*\//,"comment","@pop"],[/[\/*]/,"comment"]],jsdoc:[[/[^\/*]+/,"comment.doc"],[/\*\//,"comment.doc","@pop"],[/[\/*]/,"comment.doc"]],regexp:[[/(\{)(\d+(?:,\d*)?)(\})/,["regexp.escape.control","regexp.escape.control","regexp.escape.control"]],[/(\[)(\^?)(?=(?:[^\]\\\/]|\\.)+)/,["regexp.escape.control",{token:"regexp.escape.control",next:"@regexrange"}]],[/(\()(\?:|\?=|\?!)/,["regexp.escape.control","regexp.escape.control"]],[/[()]/,"regexp.escape.control"],[/@regexpctl/,"regexp.escape.control"],[/[^\\\/]/,"regexp"],[/@regexpesc/,"regexp.escape"],[/\\\./,"regexp.invalid"],[/(\/)([gimsuy]*)/,[{token:"regexp",bracket:"@close",next:"@pop"},"keyword.other"]]],regexrange:[[/-/,"regexp.escape.control"],[/\^/,"regexp.invalid"],[/@regexpesc/,"regexp.escape"],[/[^\]]/,"regexp"],[/\]/,{token:"regexp.escape.control",next:"@pop",bracket:"@close"}]],string_double:[[/[^\\"\$]+/,"string"],[/[^\\"]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/"/,"string","@pop"],[/\$\w+/,"identifier"]],string_single:[[/[^\\'\$]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/'/,"string","@pop"],[/\$\w+/,"identifier"]]}}},5849:(e,n,t)=>{t.r(n),t.d(n,{conf:()=>i,language:()=>r});var i={brackets:[["{","}"],["[","]"],["(",")"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}]},r={defaultToken:"",tokenPostfix:".dockerfile",variable:/\${?[\w]+}?/,tokenizer:{root:[{include:"@whitespace"},{include:"@comment"},[/(ONBUILD)(\s+)/,["keyword",""]],[/(ENV)(\s+)([\w]+)/,["keyword","",{token:"variable",next:"@arguments"}]],[/(FROM|MAINTAINER|RUN|EXPOSE|ENV|ADD|ARG|VOLUME|LABEL|USER|WORKDIR|COPY|CMD|STOPSIGNAL|SHELL|HEALTHCHECK|ENTRYPOINT)/,{token:"keyword",next:"@arguments"}]],arguments:[{include:"@whitespace"},{include:"@strings"},[/(@variable)/,{cases:{"@eos":{token:"variable",next:"@popall"},"@default":"variable"}}],[/\\/,{cases:{"@eos":"","@default":""}}],[/./,{cases:{"@eos":{token:"",next:"@popall"},"@default":""}}]],whitespace:[[/\s+/,{cases:{"@eos":{token:"",next:"@popall"},"@default":""}}]],comment:[[/(^#.*$)/,"comment","@popall"]],strings:[[/\\'$/,"","@popall"],[/\\'/,""],[/'$/,"string","@popall"],[/'/,"string","@stringBody"],[/"$/,"string","@popall"],[/"/,"string","@dblStringBody"]],stringBody:[[/[^\\\$']/,{cases:{"@eos":{token:"string",next:"@popall"},"@default":"string"}}],[/\\./,"string.escape"],[/'$/,"string","@popall"],[/'/,"string","@pop"],[/(@variable)/,"variable"],[/\\$/,"string"],[/$/,"string","@popall"]],dblStringBody:[[/[^\\\$"]/,{cases:{"@eos":{token:"string",next:"@popall"},"@default":"string"}}],[/\\./,"string.escape"],[/"$/,"string","@popall"],[/"/,"string","@pop"],[/(@variable)/,"variable"],[/\\$/,"string"],[/$/,"string","@popall"]]}}},2954:(e,n,t)=>{t.r(n),t.d(n,{conf:()=>i,language:()=>r});var i={comments:{blockComment:["\x3c!--","--\x3e"]},brackets:[["{","}"],["[","]"],["(",")"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:"<",close:">",notIn:["string"]}],surroundingPairs:[{open:"(",close:")"},{open:"[",close:"]"},{open:"`",close:"`"}],folding:{markers:{start:new RegExp("^\\s*\x3c!--\\s*#?region\\b.*--\x3e"),end:new RegExp("^\\s*\x3c!--\\s*#?endregion\\b.*--\x3e")}}},r={defaultToken:"",tokenPostfix:".md",control:/[\\`*_\[\]{}()#+\-\.!]/,noncontrol:/[^\\`*_\[\]{}()#+\-\.!]/,escapes:/\\(?:@control)/,jsescapes:/\\(?:[btnfr\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,empty:["area","base","basefont","br","col","frame","hr","img","input","isindex","link","meta","param"],tokenizer:{root:[[/^\s*\|/,"@rematch","@table_header"],[/^(\s{0,3})(#+)((?:[^\\#]|@escapes)+)((?:#+)?)/,["white","keyword","keyword","keyword"]],[/^\s*(=+|\-+)\s*$/,"keyword"],[/^\s*((\*[ ]?)+)\s*$/,"meta.separator"],[/^\s*>+/,"comment"],[/^\s*([\*\-+:]|\d+\.)\s/,"keyword"],[/^(\t|[ ]{4})[^ ].*$/,"string"],[/^\s*~~~\s*((?:\w|[\/\-#])+)?\s*$/,{token:"string",next:"@codeblock"}],[/^\s*```\s*((?:\w|[\/\-#])+).*$/,{token:"string",next:"@codeblockgh",nextEmbedded:"$1"}],[/^\s*```\s*$/,{token:"string",next:"@codeblock"}],{include:"@linecontent"}],table_header:[{include:"@table_common"},[/[^\|]+/,"keyword.table.header"]],table_body:[{include:"@table_common"},{include:"@linecontent"}],table_common:[[/\s*[\-:]+\s*/,{token:"keyword",switchTo:"table_body"}],[/^\s*\|/,"keyword.table.left"],[/^\s*[^\|]/,"@rematch","@pop"],[/^\s*$/,"@rematch","@pop"],[/\|/,{cases:{"@eos":"keyword.table.right","@default":"keyword.table.middle"}}]],codeblock:[[/^\s*~~~\s*$/,{token:"string",next:"@pop"}],[/^\s*```\s*$/,{token:"string",next:"@pop"}],[/.*$/,"variable.source"]],codeblockgh:[[/```\s*$/,{token:"string",next:"@pop",nextEmbedded:"@pop"}],[/[^`]+/,"variable.source"]],linecontent:[[/&\w+;/,"string.escape"],[/@escapes/,"escape"],[/\b__([^\\_]|@escapes|_(?!_))+__\b/,"strong"],[/\*\*([^\\*]|@escapes|\*(?!\*))+\*\*/,"strong"],[/\b_[^_]+_\b/,"emphasis"],[/\*([^\\*]|@escapes)+\*/,"emphasis"],[/`([^\\`]|@escapes)+`/,"variable"],[/\{+[^}]+\}+/,"string.target"],[/(!?\[)((?:[^\]\\]|@escapes)*)(\]\([^\)]+\))/,["string.link","","string.link"]],[/(!?\[)((?:[^\]\\]|@escapes)*)(\])/,"string.link"],{include:"html"}],html:[[/<(\w+)\/>/,"tag"],[/<(\w+)/,{cases:{"@empty":{token:"tag",next:"@tag.$1"},"@default":{token:"tag",next:"@tag.$1"}}}],[/<\/(\w+)\s*>/,{token:"tag"}],[/<!--/,"comment","@comment"]],comment:[[/[^<\-]+/,"comment.content"],[/-->/,"comment","@pop"],[/<!--/,"comment.content.invalid"],[/[<\-]/,"comment.content"]],tag:[[/[ \t\r\n]+/,"white"],[/(type)(\s*=\s*)(")([^"]+)(")/,["attribute.name.html","delimiter.html","string.html",{token:"string.html",switchTo:"@tag.$S2.$4"},"string.html"]],[/(type)(\s*=\s*)(')([^']+)(')/,["attribute.name.html","delimiter.html","string.html",{token:"string.html",switchTo:"@tag.$S2.$4"},"string.html"]],[/(\w+)(\s*=\s*)("[^"]*"|'[^']*')/,["attribute.name.html","delimiter.html","string.html"]],[/\w+/,"attribute.name.html"],[/\/>/,"tag","@pop"],[/>/,{cases:{"$S2==style":{token:"tag",switchTo:"embeddedStyle",nextEmbedded:"text/css"},"$S2==script":{cases:{$S3:{token:"tag",switchTo:"embeddedScript",nextEmbedded:"$S3"},"@default":{token:"tag",switchTo:"embeddedScript",nextEmbedded:"text/javascript"}}},"@default":{token:"tag",next:"@pop"}}}]],embeddedStyle:[[/[^<]+/,""],[/<\/style\s*>/,{token:"@rematch",next:"@pop",nextEmbedded:"@pop"}],[/</,""]],embeddedScript:[[/[^<]+/,""],[/<\/script\s*>/,{token:"@rematch",next:"@pop",nextEmbedded:"@pop"}],[/</,""]]}}},9398:(e,n,t)=>{t.r(n),t.d(n,{conf:()=>i,language:()=>r});var i={comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["[","]"],["(",")"],["{","}"]],autoClosingPairs:[{open:'"',close:'"',notIn:["string","comment"]},{open:"'",close:"'",notIn:["string","comment"]},{open:"[",close:"]",notIn:["string","comment"]},{open:"(",close:")",notIn:["string","comment"]},{open:"{",close:"}",notIn:["string","comment"]}]},r={defaultToken:"",tokenPostfix:".msdax",ignoreCase:!0,brackets:[{open:"[",close:"]",token:"delimiter.square"},{open:"{",close:"}",token:"delimiter.brackets"},{open:"(",close:")",token:"delimiter.parenthesis"}],keywords:["VAR","RETURN","NOT","EVALUATE","DATATABLE","ORDER","BY","START","AT","DEFINE","MEASURE","ASC","DESC","IN","BOOLEAN","DOUBLE","INTEGER","DATETIME","CURRENCY","STRING"],functions:["CLOSINGBALANCEMONTH","CLOSINGBALANCEQUARTER","CLOSINGBALANCEYEAR","DATEADD","DATESBETWEEN","DATESINPERIOD","DATESMTD","DATESQTD","DATESYTD","ENDOFMONTH","ENDOFQUARTER","ENDOFYEAR","FIRSTDATE","FIRSTNONBLANK","LASTDATE","LASTNONBLANK","NEXTDAY","NEXTMONTH","NEXTQUARTER","NEXTYEAR","OPENINGBALANCEMONTH","OPENINGBALANCEQUARTER","OPENINGBALANCEYEAR","PARALLELPERIOD","PREVIOUSDAY","PREVIOUSMONTH","PREVIOUSQUARTER","PREVIOUSYEAR","SAMEPERIODLASTYEAR","STARTOFMONTH","STARTOFQUARTER","STARTOFYEAR","TOTALMTD","TOTALQTD","TOTALYTD","ADDCOLUMNS","ADDMISSINGITEMS","ALL","ALLEXCEPT","ALLNOBLANKROW","ALLSELECTED","CALCULATE","CALCULATETABLE","CALENDAR","CALENDARAUTO","CROSSFILTER","CROSSJOIN","CURRENTGROUP","DATATABLE","DETAILROWS","DISTINCT","EARLIER","EARLIEST","EXCEPT","FILTER","FILTERS","GENERATE","GENERATEALL","GROUPBY","IGNORE","INTERSECT","ISONORAFTER","KEEPFILTERS","LOOKUPVALUE","NATURALINNERJOIN","NATURALLEFTOUTERJOIN","RELATED","RELATEDTABLE","ROLLUP","ROLLUPADDISSUBTOTAL","ROLLUPGROUP","ROLLUPISSUBTOTAL","ROW","SAMPLE","SELECTCOLUMNS","SUBSTITUTEWITHINDEX","SUMMARIZE","SUMMARIZECOLUMNS","TOPN","TREATAS","UNION","USERELATIONSHIP","VALUES","SUM","SUMX","PATH","PATHCONTAINS","PATHITEM","PATHITEMREVERSE","PATHLENGTH","AVERAGE","AVERAGEA","AVERAGEX","COUNT","COUNTA","COUNTAX","COUNTBLANK","COUNTROWS","COUNTX","DISTINCTCOUNT","DIVIDE","GEOMEAN","GEOMEANX","MAX","MAXA","MAXX","MEDIAN","MEDIANX","MIN","MINA","MINX","PERCENTILE.EXC","PERCENTILE.INC","PERCENTILEX.EXC","PERCENTILEX.INC","PRODUCT","PRODUCTX","RANK.EQ","RANKX","STDEV.P","STDEV.S","STDEVX.P","STDEVX.S","VAR.P","VAR.S","VARX.P","VARX.S","XIRR","XNPV","DATE","DATEDIFF","DATEVALUE","DAY","EDATE","EOMONTH","HOUR","MINUTE","MONTH","NOW","SECOND","TIME","TIMEVALUE","TODAY","WEEKDAY","WEEKNUM","YEAR","YEARFRAC","CONTAINS","CONTAINSROW","CUSTOMDATA","ERROR","HASONEFILTER","HASONEVALUE","ISBLANK","ISCROSSFILTERED","ISEMPTY","ISERROR","ISEVEN","ISFILTERED","ISLOGICAL","ISNONTEXT","ISNUMBER","ISODD","ISSUBTOTAL","ISTEXT","USERNAME","USERPRINCIPALNAME","AND","FALSE","IF","IFERROR","NOT","OR","SWITCH","TRUE","ABS","ACOS","ACOSH","ACOT","ACOTH","ASIN","ASINH","ATAN","ATANH","BETA.DIST","BETA.INV","CEILING","CHISQ.DIST","CHISQ.DIST.RT","CHISQ.INV","CHISQ.INV.RT","COMBIN","COMBINA","CONFIDENCE.NORM","CONFIDENCE.T","COS","COSH","COT","COTH","CURRENCY","DEGREES","EVEN","EXP","EXPON.DIST","FACT","FLOOR","GCD","INT","ISO.CEILING","LCM","LN","LOG","LOG10","MOD","MROUND","ODD","PERMUT","PI","POISSON.DIST","POWER","QUOTIENT","RADIANS","RAND","RANDBETWEEN","ROUND","ROUNDDOWN","ROUNDUP","SIGN","SIN","SINH","SQRT","SQRTPI","TAN","TANH","TRUNC","BLANK","CONCATENATE","CONCATENATEX","EXACT","FIND","FIXED","FORMAT","LEFT","LEN","LOWER","MID","REPLACE","REPT","RIGHT","SEARCH","SUBSTITUTE","TRIM","UNICHAR","UNICODE","UPPER","VALUE"],tokenizer:{root:[{include:"@comments"},{include:"@whitespace"},{include:"@numbers"},{include:"@strings"},{include:"@complexIdentifiers"},[/[;,.]/,"delimiter"],[/[({})]/,"@brackets"],[/[a-z_][a-zA-Z0-9_]*/,{cases:{"@keywords":"keyword","@functions":"keyword","@default":"identifier"}}],[/[<>=!%&+\-*/|~^]/,"operator"]],whitespace:[[/\s+/,"white"]],comments:[[/\/\/+.*/,"comment"],[/\/\*/,{token:"comment.quote",next:"@comment"}]],comment:[[/[^*/]+/,"comment"],[/\*\//,{token:"comment.quote",next:"@pop"}],[/./,"comment"]],numbers:[[/0[xX][0-9a-fA-F]*/,"number"],[/[$][+-]*\d*(\.\d*)?/,"number"],[/((\d+(\.\d*)?)|(\.\d+))([eE][\-+]?\d+)?/,"number"]],strings:[[/N"/,{token:"string",next:"@string"}],[/"/,{token:"string",next:"@string"}]],string:[[/[^"]+/,"string"],[/""/,"string"],[/"/,{token:"string",next:"@pop"}]],complexIdentifiers:[[/\[/,{token:"identifier.quote",next:"@bracketedIdentifier"}],[/'/,{token:"identifier.quote",next:"@quotedIdentifier"}]],bracketedIdentifier:[[/[^\]]+/,"identifier"],[/]]/,"identifier"],[/]/,{token:"identifier.quote",next:"@pop"}]],quotedIdentifier:[[/[^']+/,"identifier"],[/''/,"identifier"],[/'/,{token:"identifier.quote",next:"@pop"}]]}}},8084:(e,n,t)=>{t.r(n),t.d(n,{conf:()=>i,language:()=>r});var i={comments:{lineComment:"//",blockComment:["(*","*)"]},brackets:[["{","}"],["[","]"],["(",")"],["<",">"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:"<",close:">"},{open:"'",close:"'"}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:"<",close:">"},{open:"'",close:"'"}]},r={defaultToken:"",tokenPostfix:".pascaligo",ignoreCase:!0,brackets:[{open:"{",close:"}",token:"delimiter.curly"},{open:"[",close:"]",token:"delimiter.square"},{open:"(",close:")",token:"delimiter.parenthesis"},{open:"<",close:">",token:"delimiter.angle"}],keywords:["begin","block","case","const","else","end","fail","for","from","function","if","is","nil","of","remove","return","skip","then","type","var","while","with","option","None","transaction"],typeKeywords:["bool","int","list","map","nat","record","string","unit","address","map","mtz","xtz"],operators:["=",">","<","<=",">=","<>",":",":=","and","mod","or","+","-","*","/","@","&","^","%"],symbols:/[=><:@\^&|+\-*\/\^%]+/,tokenizer:{root:[[/[a-zA-Z_][\w]*/,{cases:{"@keywords":{token:"keyword.$0"},"@default":"identifier"}}],{include:"@whitespace"},[/[{}()\[\]]/,"@brackets"],[/[<>](?!@symbols)/,"@brackets"],[/@symbols/,{cases:{"@operators":"delimiter","@default":""}}],[/\d*\.\d+([eE][\-+]?\d+)?/,"number.float"],[/\$[0-9a-fA-F]{1,16}/,"number.hex"],[/\d+/,"number"],[/[;,.]/,"delimiter"],[/'([^'\\]|\\.)*$/,"string.invalid"],[/'/,"string","@string"],[/'[^\\']'/,"string"],[/'/,"string.invalid"],[/\#\d+/,"string"]],comment:[[/[^\(\*]+/,"comment"],[/\*\)/,"comment","@pop"],[/\(\*/,"comment"]],string:[[/[^\\']+/,"string"],[/\\./,"string.escape.invalid"],[/'/,{token:"string.quote",bracket:"@close",next:"@pop"}]],whitespace:[[/[ \t\r\n]+/,"white"],[/\(\*/,"comment","@comment"],[/\/\/.*$/,"comment"]]}}},7835:(e,n,t)=>{t.r(n),t.d(n,{conf:()=>i,language:()=>r});var i={wordPattern:/(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],autoClosingPairs:[{open:"{",close:"}",notIn:["string"]},{open:"[",close:"]",notIn:["string"]},{open:"(",close:")",notIn:["string"]},{open:'"',close:'"',notIn:["string"]},{open:"'",close:"'",notIn:["string","comment"]}],folding:{markers:{start:new RegExp("^\\s*(#|//)region\\b"),end:new RegExp("^\\s*(#|//)endregion\\b")}}},r={defaultToken:"",tokenPostfix:"",tokenizer:{root:[[/<\?((php)|=)?/,{token:"@rematch",switchTo:"@phpInSimpleState.root"}],[/<!DOCTYPE/,"metatag.html","@doctype"],[/<!--/,"comment.html","@comment"],[/(<)(\w+)(\/>)/,["delimiter.html","tag.html","delimiter.html"]],[/(<)(script)/,["delimiter.html",{token:"tag.html",next:"@script"}]],[/(<)(style)/,["delimiter.html",{token:"tag.html",next:"@style"}]],[/(<)([:\w]+)/,["delimiter.html",{token:"tag.html",next:"@otherTag"}]],[/(<\/)(\w+)/,["delimiter.html",{token:"tag.html",next:"@otherTag"}]],[/</,"delimiter.html"],[/[^<]+/]],doctype:[[/<\?((php)|=)?/,{token:"@rematch",switchTo:"@phpInSimpleState.comment"}],[/[^>]+/,"metatag.content.html"],[/>/,"metatag.html","@pop"]],comment:[[/<\?((php)|=)?/,{token:"@rematch",switchTo:"@phpInSimpleState.comment"}],[/-->/,"comment.html","@pop"],[/[^-]+/,"comment.content.html"],[/./,"comment.content.html"]],otherTag:[[/<\?((php)|=)?/,{token:"@rematch",switchTo:"@phpInSimpleState.otherTag"}],[/\/?>/,"delimiter.html","@pop"],[/"([^"]*)"/,"attribute.value"],[/'([^']*)'/,"attribute.value"],[/[\w\-]+/,"attribute.name"],[/=/,"delimiter"],[/[ \t\r\n]+/]],script:[[/<\?((php)|=)?/,{token:"@rematch",switchTo:"@phpInSimpleState.script"}],[/type/,"attribute.name","@scriptAfterType"],[/"([^"]*)"/,"attribute.value"],[/'([^']*)'/,"attribute.value"],[/[\w\-]+/,"attribute.name"],[/=/,"delimiter"],[/>/,{token:"delimiter.html",next:"@scriptEmbedded.text/javascript",nextEmbedded:"text/javascript"}],[/[ \t\r\n]+/],[/(<\/)(script\s*)(>)/,["delimiter.html","tag.html",{token:"delimiter.html",next:"@pop"}]]],scriptAfterType:[[/<\?((php)|=)?/,{token:"@rematch",switchTo:"@phpInSimpleState.scriptAfterType"}],[/=/,"delimiter","@scriptAfterTypeEquals"],[/>/,{token:"delimiter.html",next:"@scriptEmbedded.text/javascript",nextEmbedded:"text/javascript"}],[/[ \t\r\n]+/],[/<\/script\s*>/,{token:"@rematch",next:"@pop"}]],scriptAfterTypeEquals:[[/<\?((php)|=)?/,{token:"@rematch",switchTo:"@phpInSimpleState.scriptAfterTypeEquals"}],[/"([^"]*)"/,{token:"attribute.value",switchTo:"@scriptWithCustomType.$1"}],[/'([^']*)'/,{token:"attribute.value",switchTo:"@scriptWithCustomType.$1"}],[/>/,{token:"delimiter.html",next:"@scriptEmbedded.text/javascript",nextEmbedded:"text/javascript"}],[/[ \t\r\n]+/],[/<\/script\s*>/,{token:"@rematch",next:"@pop"}]],scriptWithCustomType:[[/<\?((php)|=)?/,{token:"@rematch",switchTo:"@phpInSimpleState.scriptWithCustomType.$S2"}],[/>/,{token:"delimiter.html",next:"@scriptEmbedded.$S2",nextEmbedded:"$S2"}],[/"([^"]*)"/,"attribute.value"],[/'([^']*)'/,"attribute.value"],[/[\w\-]+/,"attribute.name"],[/=/,"delimiter"],[/[ \t\r\n]+/],[/<\/script\s*>/,{token:"@rematch",next:"@pop"}]],scriptEmbedded:[[/<\?((php)|=)?/,{token:"@rematch",switchTo:"@phpInEmbeddedState.scriptEmbedded.$S2",nextEmbedded:"@pop"}],[/<\/script/,{token:"@rematch",next:"@pop",nextEmbedded:"@pop"}]],style:[[/<\?((php)|=)?/,{token:"@rematch",switchTo:"@phpInSimpleState.style"}],[/type/,"attribute.name","@styleAfterType"],[/"([^"]*)"/,"attribute.value"],[/'([^']*)'/,"attribute.value"],[/[\w\-]+/,"attribute.name"],[/=/,"delimiter"],[/>/,{token:"delimiter.html",next:"@styleEmbedded.text/css",nextEmbedded:"text/css"}],[/[ \t\r\n]+/],[/(<\/)(style\s*)(>)/,["delimiter.html","tag.html",{token:"delimiter.html",next:"@pop"}]]],styleAfterType:[[/<\?((php)|=)?/,{token:"@rematch",switchTo:"@phpInSimpleState.styleAfterType"}],[/=/,"delimiter","@styleAfterTypeEquals"],[/>/,{token:"delimiter.html",next:"@styleEmbedded.text/css",nextEmbedded:"text/css"}],[/[ \t\r\n]+/],[/<\/style\s*>/,{token:"@rematch",next:"@pop"}]],styleAfterTypeEquals:[[/<\?((php)|=)?/,{token:"@rematch",switchTo:"@phpInSimpleState.styleAfterTypeEquals"}],[/"([^"]*)"/,{token:"attribute.value",switchTo:"@styleWithCustomType.$1"}],[/'([^']*)'/,{token:"attribute.value",switchTo:"@styleWithCustomType.$1"}],[/>/,{token:"delimiter.html",next:"@styleEmbedded.text/css",nextEmbedded:"text/css"}],[/[ \t\r\n]+/],[/<\/style\s*>/,{token:"@rematch",next:"@pop"}]],styleWithCustomType:[[/<\?((php)|=)?/,{token:"@rematch",switchTo:"@phpInSimpleState.styleWithCustomType.$S2"}],[/>/,{token:"delimiter.html",next:"@styleEmbedded.$S2",nextEmbedded:"$S2"}],[/"([^"]*)"/,"attribute.value"],[/'([^']*)'/,"attribute.value"],[/[\w\-]+/,"attribute.name"],[/=/,"delimiter"],[/[ \t\r\n]+/],[/<\/style\s*>/,{token:"@rematch",next:"@pop"}]],styleEmbedded:[[/<\?((php)|=)?/,{token:"@rematch",switchTo:"@phpInEmbeddedState.styleEmbedded.$S2",nextEmbedded:"@pop"}],[/<\/style/,{token:"@rematch",next:"@pop",nextEmbedded:"@pop"}]],phpInSimpleState:[[/<\?((php)|=)?/,"metatag.php"],[/\?>/,{token:"metatag.php",switchTo:"@$S2.$S3"}],{include:"phpRoot"}],phpInEmbeddedState:[[/<\?((php)|=)?/,"metatag.php"],[/\?>/,{token:"metatag.php",switchTo:"@$S2.$S3",nextEmbedded:"$S3"}],{include:"phpRoot"}],phpRoot:[[/[a-zA-Z_]\w*/,{cases:{"@phpKeywords":{token:"keyword.php"},"@phpCompileTimeConstants":{token:"constant.php"},"@default":"identifier.php"}}],[/[$a-zA-Z_]\w*/,{cases:{"@phpPreDefinedVariables":{token:"variable.predefined.php"},"@default":"variable.php"}}],[/[{}]/,"delimiter.bracket.php"],[/[\[\]]/,"delimiter.array.php"],[/[()]/,"delimiter.parenthesis.php"],[/[ \t\r\n]+/],[/(#|\/\/)$/,"comment.php"],[/(#|\/\/)/,"comment.php","@phpLineComment"],[/\/\*/,"comment.php","@phpComment"],[/"/,"string.php","@phpDoubleQuoteString"],[/'/,"string.php","@phpSingleQuoteString"],[/[\+\-\*\%\&\|\^\~\!\=\<\>\/\?\;\:\.\,\@]/,"delimiter.php"],[/\d*\d+[eE]([\-+]?\d+)?/,"number.float.php"],[/\d*\.\d+([eE][\-+]?\d+)?/,"number.float.php"],[/0[xX][0-9a-fA-F']*[0-9a-fA-F]/,"number.hex.php"],[/0[0-7']*[0-7]/,"number.octal.php"],[/0[bB][0-1']*[0-1]/,"number.binary.php"],[/\d[\d']*/,"number.php"],[/\d/,"number.php"]],phpComment:[[/\*\//,"comment.php","@pop"],[/[^*]+/,"comment.php"],[/./,"comment.php"]],phpLineComment:[[/\?>/,{token:"@rematch",next:"@pop"}],[/.$/,"comment.php","@pop"],[/[^?]+$/,"comment.php","@pop"],[/[^?]+/,"comment.php"],[/./,"comment.php"]],phpDoubleQuoteString:[[/[^\\"]+/,"string.php"],[/@escapes/,"string.escape.php"],[/\\./,"string.escape.invalid.php"],[/"/,"string.php","@pop"]],phpSingleQuoteString:[[/[^\\']+/,"string.php"],[/@escapes/,"string.escape.php"],[/\\./,"string.escape.invalid.php"],[/'/,"string.php","@pop"]]},phpKeywords:["abstract","and","array","as","break","callable","case","catch","cfunction","class","clone","const","continue","declare","default","do","else","elseif","enddeclare","endfor","endforeach","endif","endswitch","endwhile","extends","false","final","for","foreach","function","global","goto","if","implements","interface","instanceof","insteadof","namespace","new","null","object","old_function","or","private","protected","public","resource","static","switch","throw","trait","try","true","use","var","while","xor","die","echo","empty","exit","eval","include","include_once","isset","list","require","require_once","return","print","unset","yield","__construct"],phpCompileTimeConstants:["__CLASS__","__DIR__","__FILE__","__LINE__","__NAMESPACE__","__METHOD__","__FUNCTION__","__TRAIT__"],phpPreDefinedVariables:["$GLOBALS","$_SERVER","$_GET","$_POST","$_FILES","$_REQUEST","$_SESSION","$_ENV","$_COOKIE","$php_errormsg","$HTTP_RAW_POST_DATA","$http_response_header","$argc","$argv"],escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/}},6424:(e,n,t)=>{t.r(n),t.d(n,{conf:()=>o,language:()=>s});var i=t(9587),r=["area","base","br","col","embed","hr","img","input","keygen","link","menuitem","meta","param","source","track","wbr"],o={wordPattern:/(-?\d*\.\d\w*)|([^\`\~\!\@\$\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\s]+)/g,comments:{blockComment:["\x3c!--","--\x3e"]},brackets:[["\x3c!--","--\x3e"],["<",">"],["{","}"],["(",")"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],surroundingPairs:[{open:'"',close:'"'},{open:"'",close:"'"},{open:"<",close:">"}],onEnterRules:[{beforeText:new RegExp("<(?!(?:"+r.join("|")+"))(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$","i"),afterText:/^<\/(\w[\w\d]*)\s*>$/i,action:{indentAction:i.Mj.IndentAction.IndentOutdent}},{beforeText:new RegExp("<(?!(?:"+r.join("|")+"))(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$","i"),action:{indentAction:i.Mj.IndentAction.Indent}}]},s={defaultToken:"",tokenPostfix:"",tokenizer:{root:[[/@@@@/],[/@[^@]/,{token:"@rematch",switchTo:"@razorInSimpleState.root"}],[/<!DOCTYPE/,"metatag.html","@doctype"],[/<!--/,"comment.html","@comment"],[/(<)([\w\-]+)(\/>)/,["delimiter.html","tag.html","delimiter.html"]],[/(<)(script)/,["delimiter.html",{token:"tag.html",next:"@script"}]],[/(<)(style)/,["delimiter.html",{token:"tag.html",next:"@style"}]],[/(<)([:\w\-]+)/,["delimiter.html",{token:"tag.html",next:"@otherTag"}]],[/(<\/)([\w\-]+)/,["delimiter.html",{token:"tag.html",next:"@otherTag"}]],[/</,"delimiter.html"],[/[ \t\r\n]+/],[/[^<@]+/]],doctype:[[/@[^@]/,{token:"@rematch",switchTo:"@razorInSimpleState.comment"}],[/[^>]+/,"metatag.content.html"],[/>/,"metatag.html","@pop"]],comment:[[/@[^@]/,{token:"@rematch",switchTo:"@razorInSimpleState.comment"}],[/-->/,"comment.html","@pop"],[/[^-]+/,"comment.content.html"],[/./,"comment.content.html"]],otherTag:[[/@[^@]/,{token:"@rematch",switchTo:"@razorInSimpleState.otherTag"}],[/\/?>/,"delimiter.html","@pop"],[/"([^"]*)"/,"attribute.value"],[/'([^']*)'/,"attribute.value"],[/[\w\-]+/,"attribute.name"],[/=/,"delimiter"],[/[ \t\r\n]+/]],script:[[/@[^@]/,{token:"@rematch",switchTo:"@razorInSimpleState.script"}],[/type/,"attribute.name","@scriptAfterType"],[/"([^"]*)"/,"attribute.value"],[/'([^']*)'/,"attribute.value"],[/[\w\-]+/,"attribute.name"],[/=/,"delimiter"],[/>/,{token:"delimiter.html",next:"@scriptEmbedded.text/javascript",nextEmbedded:"text/javascript"}],[/[ \t\r\n]+/],[/(<\/)(script\s*)(>)/,["delimiter.html","tag.html",{token:"delimiter.html",next:"@pop"}]]],scriptAfterType:[[/@[^@]/,{token:"@rematch",switchTo:"@razorInSimpleState.scriptAfterType"}],[/=/,"delimiter","@scriptAfterTypeEquals"],[/>/,{token:"delimiter.html",next:"@scriptEmbedded.text/javascript",nextEmbedded:"text/javascript"}],[/[ \t\r\n]+/],[/<\/script\s*>/,{token:"@rematch",next:"@pop"}]],scriptAfterTypeEquals:[[/@[^@]/,{token:"@rematch",switchTo:"@razorInSimpleState.scriptAfterTypeEquals"}],[/"([^"]*)"/,{token:"attribute.value",switchTo:"@scriptWithCustomType.$1"}],[/'([^']*)'/,{token:"attribute.value",switchTo:"@scriptWithCustomType.$1"}],[/>/,{token:"delimiter.html",next:"@scriptEmbedded.text/javascript",nextEmbedded:"text/javascript"}],[/[ \t\r\n]+/],[/<\/script\s*>/,{token:"@rematch",next:"@pop"}]],scriptWithCustomType:[[/@[^@]/,{token:"@rematch",switchTo:"@razorInSimpleState.scriptWithCustomType.$S2"}],[/>/,{token:"delimiter.html",next:"@scriptEmbedded.$S2",nextEmbedded:"$S2"}],[/"([^"]*)"/,"attribute.value"],[/'([^']*)'/,"attribute.value"],[/[\w\-]+/,"attribute.name"],[/=/,"delimiter"],[/[ \t\r\n]+/],[/<\/script\s*>/,{token:"@rematch",next:"@pop"}]],scriptEmbedded:[[/@[^@]/,{token:"@rematch",switchTo:"@razorInEmbeddedState.scriptEmbedded.$S2",nextEmbedded:"@pop"}],[/<\/script/,{token:"@rematch",next:"@pop",nextEmbedded:"@pop"}]],style:[[/@[^@]/,{token:"@rematch",switchTo:"@razorInSimpleState.style"}],[/type/,"attribute.name","@styleAfterType"],[/"([^"]*)"/,"attribute.value"],[/'([^']*)'/,"attribute.value"],[/[\w\-]+/,"attribute.name"],[/=/,"delimiter"],[/>/,{token:"delimiter.html",next:"@styleEmbedded.text/css",nextEmbedded:"text/css"}],[/[ \t\r\n]+/],[/(<\/)(style\s*)(>)/,["delimiter.html","tag.html",{token:"delimiter.html",next:"@pop"}]]],styleAfterType:[[/@[^@]/,{token:"@rematch",switchTo:"@razorInSimpleState.styleAfterType"}],[/=/,"delimiter","@styleAfterTypeEquals"],[/>/,{token:"delimiter.html",next:"@styleEmbedded.text/css",nextEmbedded:"text/css"}],[/[ \t\r\n]+/],[/<\/style\s*>/,{token:"@rematch",next:"@pop"}]],styleAfterTypeEquals:[[/@[^@]/,{token:"@rematch",switchTo:"@razorInSimpleState.styleAfterTypeEquals"}],[/"([^"]*)"/,{token:"attribute.value",switchTo:"@styleWithCustomType.$1"}],[/'([^']*)'/,{token:"attribute.value",switchTo:"@styleWithCustomType.$1"}],[/>/,{token:"delimiter.html",next:"@styleEmbedded.text/css",nextEmbedded:"text/css"}],[/[ \t\r\n]+/],[/<\/style\s*>/,{token:"@rematch",next:"@pop"}]],styleWithCustomType:[[/@[^@]/,{token:"@rematch",switchTo:"@razorInSimpleState.styleWithCustomType.$S2"}],[/>/,{token:"delimiter.html",next:"@styleEmbedded.$S2",nextEmbedded:"$S2"}],[/"([^"]*)"/,"attribute.value"],[/'([^']*)'/,"attribute.value"],[/[\w\-]+/,"attribute.name"],[/=/,"delimiter"],[/[ \t\r\n]+/],[/<\/style\s*>/,{token:"@rematch",next:"@pop"}]],styleEmbedded:[[/@[^@]/,{token:"@rematch",switchTo:"@razorInEmbeddedState.styleEmbedded.$S2",nextEmbedded:"@pop"}],[/<\/style/,{token:"@rematch",next:"@pop",nextEmbedded:"@pop"}]],razorInSimpleState:[[/@\*/,"comment.cs","@razorBlockCommentTopLevel"],[/@[{(]/,"metatag.cs","@razorRootTopLevel"],[/(@)(\s*[\w]+)/,["metatag.cs",{token:"identifier.cs",switchTo:"@$S2.$S3"}]],[/[})]/,{token:"metatag.cs",switchTo:"@$S2.$S3"}],[/\*@/,{token:"comment.cs",switchTo:"@$S2.$S3"}]],razorInEmbeddedState:[[/@\*/,"comment.cs","@razorBlockCommentTopLevel"],[/@[{(]/,"metatag.cs","@razorRootTopLevel"],[/(@)(\s*[\w]+)/,["metatag.cs",{token:"identifier.cs",switchTo:"@$S2.$S3",nextEmbedded:"$S3"}]],[/[})]/,{token:"metatag.cs",switchTo:"@$S2.$S3",nextEmbedded:"$S3"}],[/\*@/,{token:"comment.cs",switchTo:"@$S2.$S3",nextEmbedded:"$S3"}]],razorBlockCommentTopLevel:[[/\*@/,"@rematch","@pop"],[/[^*]+/,"comment.cs"],[/./,"comment.cs"]],razorBlockComment:[[/\*@/,"comment.cs","@pop"],[/[^*]+/,"comment.cs"],[/./,"comment.cs"]],razorRootTopLevel:[[/\{/,"delimiter.bracket.cs","@razorRoot"],[/\(/,"delimiter.parenthesis.cs","@razorRoot"],[/[})]/,"@rematch","@pop"],{include:"razorCommon"}],razorRoot:[[/\{/,"delimiter.bracket.cs","@razorRoot"],[/\(/,"delimiter.parenthesis.cs","@razorRoot"],[/\}/,"delimiter.bracket.cs","@pop"],[/\)/,"delimiter.parenthesis.cs","@pop"],{include:"razorCommon"}],razorCommon:[[/[a-zA-Z_]\w*/,{cases:{"@razorKeywords":{token:"keyword.cs"},"@default":"identifier.cs"}}],[/[\[\]]/,"delimiter.array.cs"],[/[ \t\r\n]+/],[/\/\/.*$/,"comment.cs"],[/@\*/,"comment.cs","@razorBlockComment"],[/"([^"]*)"/,"string.cs"],[/'([^']*)'/,"string.cs"],[/(<)([\w\-]+)(\/>)/,["delimiter.html","tag.html","delimiter.html"]],[/(<)([\w\-]+)(>)/,["delimiter.html","tag.html","delimiter.html"]],[/(<\/)([\w\-]+)(>)/,["delimiter.html","tag.html","delimiter.html"]],[/[\+\-\*\%\&\|\^\~\!\=\<\>\/\?\;\:\.\,]/,"delimiter.cs"],[/\d*\d+[eE]([\-+]?\d+)?/,"number.float.cs"],[/\d*\.\d+([eE][\-+]?\d+)?/,"number.float.cs"],[/0[xX][0-9a-fA-F']*[0-9a-fA-F]/,"number.hex.cs"],[/0[0-7']*[0-7]/,"number.octal.cs"],[/0[bB][0-1']*[0-1]/,"number.binary.cs"],[/\d[\d']*/,"number.cs"],[/\d/,"number.cs"]]},razorKeywords:["abstract","as","async","await","base","bool","break","by","byte","case","catch","char","checked","class","const","continue","decimal","default","delegate","do","double","descending","explicit","event","extern","else","enum","false","finally","fixed","float","for","foreach","from","goto","group","if","implicit","in","int","interface","internal","into","is","lock","long","nameof","new","null","namespace","object","operator","out","override","orderby","params","private","protected","public","readonly","ref","return","switch","struct","sbyte","sealed","short","sizeof","stackalloc","static","string","select","this","throw","true","try","typeof","uint","ulong","unchecked","unsafe","ushort","using","var","virtual","volatile","void","when","while","where","yield","model","inject"],escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/}},8715:(e,n,t)=>{t.r(n),t.d(n,{conf:()=>i,language:()=>r});var i={comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],autoClosingPairs:[{open:"[",close:"]"},{open:"{",close:"}"},{open:"(",close:")"},{open:'"',close:'"',notIn:["string"]}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],folding:{markers:{start:new RegExp("^\\s*#pragma\\s+region\\b"),end:new RegExp("^\\s*#pragma\\s+endregion\\b")}}},r={tokenPostfix:".rust",defaultToken:"invalid",keywords:["as","async","await","box","break","const","continue","crate","dyn","else","enum","extern","false","fn","for","if","impl","in","let","loop","match","mod","move","mut","pub","ref","return","self","static","struct","super","trait","true","try","type","unsafe","use","where","while","catch","default","union","static","abstract","alignof","become","do","final","macro","offsetof","override","priv","proc","pure","sizeof","typeof","unsized","virtual","yield"],typeKeywords:["Self","m32","m64","m128","f80","f16","f128","int","uint","float","char","bool","u8","u16","u32","u64","f32","f64","i8","i16","i32","i64","str","Option","Either","c_float","c_double","c_void","FILE","fpos_t","DIR","dirent","c_char","c_schar","c_uchar","c_short","c_ushort","c_int","c_uint","c_long","c_ulong","size_t","ptrdiff_t","clock_t","time_t","c_longlong","c_ulonglong","intptr_t","uintptr_t","off_t","dev_t","ino_t","pid_t","mode_t","ssize_t"],constants:["true","false","Some","None","Left","Right","Ok","Err"],supportConstants:["EXIT_FAILURE","EXIT_SUCCESS","RAND_MAX","EOF","SEEK_SET","SEEK_CUR","SEEK_END","_IOFBF","_IONBF","_IOLBF","BUFSIZ","FOPEN_MAX","FILENAME_MAX","L_tmpnam","TMP_MAX","O_RDONLY","O_WRONLY","O_RDWR","O_APPEND","O_CREAT","O_EXCL","O_TRUNC","S_IFIFO","S_IFCHR","S_IFBLK","S_IFDIR","S_IFREG","S_IFMT","S_IEXEC","S_IWRITE","S_IREAD","S_IRWXU","S_IXUSR","S_IWUSR","S_IRUSR","F_OK","R_OK","W_OK","X_OK","STDIN_FILENO","STDOUT_FILENO","STDERR_FILENO"],supportMacros:["format!","print!","println!","panic!","format_args!","unreachable!","write!","writeln!"],operators:["!","!=","%","%=","&","&=","&&","*","*=","+","+=","-","-=","->",".","..","...","/","/=",":",";","<<","<<=","<","<=","=","==","=>",">",">=",">>",">>=","@","^","^=","|","|=","||","_","?","#"],escapes:/\\([nrt0\"''\\]|x\h{2}|u\{\h{1,6}\})/,delimiters:/[,]/,symbols:/[\#\!\%\&\*\+\-\.\/\:\;\<\=\>\@\^\|_\?]+/,intSuffixes:/[iu](8|16|32|64|128|size)/,floatSuffixes:/f(32|64)/,tokenizer:{root:[[/r(#*)"/,{token:"string.quote",bracket:"@open",next:"@stringraw.$1"}],[/[a-zA-Z][a-zA-Z0-9_]*!?|_[a-zA-Z0-9_]+/,{cases:{"@typeKeywords":"keyword.type","@keywords":"keyword","@supportConstants":"keyword","@supportMacros":"keyword","@constants":"keyword","@default":"identifier"}}],[/\$/,"identifier"],[/'[a-zA-Z_][a-zA-Z0-9_]*(?=[^\'])/,"identifier"],[/'(\S|@escapes)'/,"string.byteliteral"],[/"/,{token:"string.quote",bracket:"@open",next:"@string"}],{include:"@numbers"},{include:"@whitespace"},[/@delimiters/,{cases:{"@keywords":"keyword","@default":"delimiter"}}],[/[{}()\[\]<>]/,"@brackets"],[/@symbols/,{cases:{"@operators":"operator","@default":""}}]],whitespace:[[/[ \t\r\n]+/,"white"],[/\/\*/,"comment","@comment"],[/\/\/.*$/,"comment"]],comment:[[/[^\/*]+/,"comment"],[/\/\*/,"comment","@push"],["\\*/","comment","@pop"],[/[\/*]/,"comment"]],string:[[/[^\\"]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/"/,{token:"string.quote",bracket:"@close",next:"@pop"}]],stringraw:[[/[^"#]+/,{token:"string"}],[/"(#*)/,{cases:{"$1==$S2":{token:"string.quote",bracket:"@close",next:"@pop"},"@default":{token:"string"}}}],[/["#]/,{token:"string"}]],numbers:[[/(0o[0-7_]+)(@intSuffixes)?/,{token:"number"}],[/(0b[0-1_]+)(@intSuffixes)?/,{token:"number"}],[/[\d][\d_]*(\.[\d][\d_]*)?[eE][+-][\d_]+(@floatSuffixes)?/,{token:"number"}],[/\b(\d\.?[\d_]*)(@floatSuffixes)?\b/,{token:"number"}],[/(0x[\da-fA-F]+)_?(@intSuffixes)?/,{token:"number"}],[/[\d][\d_]*(@intSuffixes?)?/,{token:"number"}]]}}},1156:(e,n,t)=>{t.r(n),t.d(n,{conf:()=>i,language:()=>r});var i={comments:{lineComment:"//",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"],["<",">"]],autoClosingPairs:[{open:'"',close:'"',notIn:["string","comment"]},{open:"{",close:"}",notIn:["string","comment"]},{open:"[",close:"]",notIn:["string","comment"]},{open:"(",close:")",notIn:["string","comment"]}]},r={defaultToken:"",tokenPostfix:".sol",brackets:[{token:"delimiter.curly",open:"{",close:"}"},{token:"delimiter.parenthesis",open:"(",close:")"},{token:"delimiter.square",open:"[",close:"]"},{token:"delimiter.angle",open:"<",close:">"}],keywords:["pragma","solidity","contract","library","using","struct","function","modifier","constructor","address","string","bool","Int","Uint","Byte","Fixed","Ufixed","int","int8","int16","int24","int32","int40","int48","int56","int64","int72","int80","int88","int96","int104","int112","int120","int128","int136","int144","int152","int160","int168","int176","int184","int192","int200","int208","int216","int224","int232","int240","int248","int256","uint","uint8","uint16","uint24","uint32","uint40","uint48","uint56","uint64","uint72","uint80","uint88","uint96","uint104","uint112","uint120","uint128","uint136","uint144","uint152","uint160","uint168","uint176","uint184","uint192","uint200","uint208","uint216","uint224","uint232","uint240","uint248","uint256","byte","bytes","bytes1","bytes2","bytes3","bytes4","bytes5","bytes6","bytes7","bytes8","bytes9","bytes10","bytes11","bytes12","bytes13","bytes14","bytes15","bytes16","bytes17","bytes18","bytes19","bytes20","bytes21","bytes22","bytes23","bytes24","bytes25","bytes26","bytes27","bytes28","bytes29","bytes30","bytes31","bytes32","fixed","fixed0x8","fixed0x16","fixed0x24","fixed0x32","fixed0x40","fixed0x48","fixed0x56","fixed0x64","fixed0x72","fixed0x80","fixed0x88","fixed0x96","fixed0x104","fixed0x112","fixed0x120","fixed0x128","fixed0x136","fixed0x144","fixed0x152","fixed0x160","fixed0x168","fixed0x176","fixed0x184","fixed0x192","fixed0x200","fixed0x208","fixed0x216","fixed0x224","fixed0x232","fixed0x240","fixed0x248","fixed0x256","fixed8x8","fixed8x16","fixed8x24","fixed8x32","fixed8x40","fixed8x48","fixed8x56","fixed8x64","fixed8x72","fixed8x80","fixed8x88","fixed8x96","fixed8x104","fixed8x112","fixed8x120","fixed8x128","fixed8x136","fixed8x144","fixed8x152","fixed8x160","fixed8x168","fixed8x176","fixed8x184","fixed8x192","fixed8x200","fixed8x208","fixed8x216","fixed8x224","fixed8x232","fixed8x240","fixed8x248","fixed16x8","fixed16x16","fixed16x24","fixed16x32","fixed16x40","fixed16x48","fixed16x56","fixed16x64","fixed16x72","fixed16x80","fixed16x88","fixed16x96","fixed16x104","fixed16x112","fixed16x120","fixed16x128","fixed16x136","fixed16x144","fixed16x152","fixed16x160","fixed16x168","fixed16x176","fixed16x184","fixed16x192","fixed16x200","fixed16x208","fixed16x216","fixed16x224","fixed16x232","fixed16x240","fixed24x8","fixed24x16","fixed24x24","fixed24x32","fixed24x40","fixed24x48","fixed24x56","fixed24x64","fixed24x72","fixed24x80","fixed24x88","fixed24x96","fixed24x104","fixed24x112","fixed24x120","fixed24x128","fixed24x136","fixed24x144","fixed24x152","fixed24x160","fixed24x168","fixed24x176","fixed24x184","fixed24x192","fixed24x200","fixed24x208","fixed24x216","fixed24x224","fixed24x232","fixed32x8","fixed32x16","fixed32x24","fixed32x32","fixed32x40","fixed32x48","fixed32x56","fixed32x64","fixed32x72","fixed32x80","fixed32x88","fixed32x96","fixed32x104","fixed32x112","fixed32x120","fixed32x128","fixed32x136","fixed32x144","fixed32x152","fixed32x160","fixed32x168","fixed32x176","fixed32x184","fixed32x192","fixed32x200","fixed32x208","fixed32x216","fixed32x224","fixed40x8","fixed40x16","fixed40x24","fixed40x32","fixed40x40","fixed40x48","fixed40x56","fixed40x64","fixed40x72","fixed40x80","fixed40x88","fixed40x96","fixed40x104","fixed40x112","fixed40x120","fixed40x128","fixed40x136","fixed40x144","fixed40x152","fixed40x160","fixed40x168","fixed40x176","fixed40x184","fixed40x192","fixed40x200","fixed40x208","fixed40x216","fixed48x8","fixed48x16","fixed48x24","fixed48x32","fixed48x40","fixed48x48","fixed48x56","fixed48x64","fixed48x72","fixed48x80","fixed48x88","fixed48x96","fixed48x104","fixed48x112","fixed48x120","fixed48x128","fixed48x136","fixed48x144","fixed48x152","fixed48x160","fixed48x168","fixed48x176","fixed48x184","fixed48x192","fixed48x200","fixed48x208","fixed56x8","fixed56x16","fixed56x24","fixed56x32","fixed56x40","fixed56x48","fixed56x56","fixed56x64","fixed56x72","fixed56x80","fixed56x88","fixed56x96","fixed56x104","fixed56x112","fixed56x120","fixed56x128","fixed56x136","fixed56x144","fixed56x152","fixed56x160","fixed56x168","fixed56x176","fixed56x184","fixed56x192","fixed56x200","fixed64x8","fixed64x16","fixed64x24","fixed64x32","fixed64x40","fixed64x48","fixed64x56","fixed64x64","fixed64x72","fixed64x80","fixed64x88","fixed64x96","fixed64x104","fixed64x112","fixed64x120","fixed64x128","fixed64x136","fixed64x144","fixed64x152","fixed64x160","fixed64x168","fixed64x176","fixed64x184","fixed64x192","fixed72x8","fixed72x16","fixed72x24","fixed72x32","fixed72x40","fixed72x48","fixed72x56","fixed72x64","fixed72x72","fixed72x80","fixed72x88","fixed72x96","fixed72x104","fixed72x112","fixed72x120","fixed72x128","fixed72x136","fixed72x144","fixed72x152","fixed72x160","fixed72x168","fixed72x176","fixed72x184","fixed80x8","fixed80x16","fixed80x24","fixed80x32","fixed80x40","fixed80x48","fixed80x56","fixed80x64","fixed80x72","fixed80x80","fixed80x88","fixed80x96","fixed80x104","fixed80x112","fixed80x120","fixed80x128","fixed80x136","fixed80x144","fixed80x152","fixed80x160","fixed80x168","fixed80x176","fixed88x8","fixed88x16","fixed88x24","fixed88x32","fixed88x40","fixed88x48","fixed88x56","fixed88x64","fixed88x72","fixed88x80","fixed88x88","fixed88x96","fixed88x104","fixed88x112","fixed88x120","fixed88x128","fixed88x136","fixed88x144","fixed88x152","fixed88x160","fixed88x168","fixed96x8","fixed96x16","fixed96x24","fixed96x32","fixed96x40","fixed96x48","fixed96x56","fixed96x64","fixed96x72","fixed96x80","fixed96x88","fixed96x96","fixed96x104","fixed96x112","fixed96x120","fixed96x128","fixed96x136","fixed96x144","fixed96x152","fixed96x160","fixed104x8","fixed104x16","fixed104x24","fixed104x32","fixed104x40","fixed104x48","fixed104x56","fixed104x64","fixed104x72","fixed104x80","fixed104x88","fixed104x96","fixed104x104","fixed104x112","fixed104x120","fixed104x128","fixed104x136","fixed104x144","fixed104x152","fixed112x8","fixed112x16","fixed112x24","fixed112x32","fixed112x40","fixed112x48","fixed112x56","fixed112x64","fixed112x72","fixed112x80","fixed112x88","fixed112x96","fixed112x104","fixed112x112","fixed112x120","fixed112x128","fixed112x136","fixed112x144","fixed120x8","fixed120x16","fixed120x24","fixed120x32","fixed120x40","fixed120x48","fixed120x56","fixed120x64","fixed120x72","fixed120x80","fixed120x88","fixed120x96","fixed120x104","fixed120x112","fixed120x120","fixed120x128","fixed120x136","fixed128x8","fixed128x16","fixed128x24","fixed128x32","fixed128x40","fixed128x48","fixed128x56","fixed128x64","fixed128x72","fixed128x80","fixed128x88","fixed128x96","fixed128x104","fixed128x112","fixed128x120","fixed128x128","fixed136x8","fixed136x16","fixed136x24","fixed136x32","fixed136x40","fixed136x48","fixed136x56","fixed136x64","fixed136x72","fixed136x80","fixed136x88","fixed136x96","fixed136x104","fixed136x112","fixed136x120","fixed144x8","fixed144x16","fixed144x24","fixed144x32","fixed144x40","fixed144x48","fixed144x56","fixed144x64","fixed144x72","fixed144x80","fixed144x88","fixed144x96","fixed144x104","fixed144x112","fixed152x8","fixed152x16","fixed152x24","fixed152x32","fixed152x40","fixed152x48","fixed152x56","fixed152x64","fixed152x72","fixed152x80","fixed152x88","fixed152x96","fixed152x104","fixed160x8","fixed160x16","fixed160x24","fixed160x32","fixed160x40","fixed160x48","fixed160x56","fixed160x64","fixed160x72","fixed160x80","fixed160x88","fixed160x96","fixed168x8","fixed168x16","fixed168x24","fixed168x32","fixed168x40","fixed168x48","fixed168x56","fixed168x64","fixed168x72","fixed168x80","fixed168x88","fixed176x8","fixed176x16","fixed176x24","fixed176x32","fixed176x40","fixed176x48","fixed176x56","fixed176x64","fixed176x72","fixed176x80","fixed184x8","fixed184x16","fixed184x24","fixed184x32","fixed184x40","fixed184x48","fixed184x56","fixed184x64","fixed184x72","fixed192x8","fixed192x16","fixed192x24","fixed192x32","fixed192x40","fixed192x48","fixed192x56","fixed192x64","fixed200x8","fixed200x16","fixed200x24","fixed200x32","fixed200x40","fixed200x48","fixed200x56","fixed208x8","fixed208x16","fixed208x24","fixed208x32","fixed208x40","fixed208x48","fixed216x8","fixed216x16","fixed216x24","fixed216x32","fixed216x40","fixed224x8","fixed224x16","fixed224x24","fixed224x32","fixed232x8","fixed232x16","fixed232x24","fixed240x8","fixed240x16","fixed248x8","ufixed","ufixed0x8","ufixed0x16","ufixed0x24","ufixed0x32","ufixed0x40","ufixed0x48","ufixed0x56","ufixed0x64","ufixed0x72","ufixed0x80","ufixed0x88","ufixed0x96","ufixed0x104","ufixed0x112","ufixed0x120","ufixed0x128","ufixed0x136","ufixed0x144","ufixed0x152","ufixed0x160","ufixed0x168","ufixed0x176","ufixed0x184","ufixed0x192","ufixed0x200","ufixed0x208","ufixed0x216","ufixed0x224","ufixed0x232","ufixed0x240","ufixed0x248","ufixed0x256","ufixed8x8","ufixed8x16","ufixed8x24","ufixed8x32","ufixed8x40","ufixed8x48","ufixed8x56","ufixed8x64","ufixed8x72","ufixed8x80","ufixed8x88","ufixed8x96","ufixed8x104","ufixed8x112","ufixed8x120","ufixed8x128","ufixed8x136","ufixed8x144","ufixed8x152","ufixed8x160","ufixed8x168","ufixed8x176","ufixed8x184","ufixed8x192","ufixed8x200","ufixed8x208","ufixed8x216","ufixed8x224","ufixed8x232","ufixed8x240","ufixed8x248","ufixed16x8","ufixed16x16","ufixed16x24","ufixed16x32","ufixed16x40","ufixed16x48","ufixed16x56","ufixed16x64","ufixed16x72","ufixed16x80","ufixed16x88","ufixed16x96","ufixed16x104","ufixed16x112","ufixed16x120","ufixed16x128","ufixed16x136","ufixed16x144","ufixed16x152","ufixed16x160","ufixed16x168","ufixed16x176","ufixed16x184","ufixed16x192","ufixed16x200","ufixed16x208","ufixed16x216","ufixed16x224","ufixed16x232","ufixed16x240","ufixed24x8","ufixed24x16","ufixed24x24","ufixed24x32","ufixed24x40","ufixed24x48","ufixed24x56","ufixed24x64","ufixed24x72","ufixed24x80","ufixed24x88","ufixed24x96","ufixed24x104","ufixed24x112","ufixed24x120","ufixed24x128","ufixed24x136","ufixed24x144","ufixed24x152","ufixed24x160","ufixed24x168","ufixed24x176","ufixed24x184","ufixed24x192","ufixed24x200","ufixed24x208","ufixed24x216","ufixed24x224","ufixed24x232","ufixed32x8","ufixed32x16","ufixed32x24","ufixed32x32","ufixed32x40","ufixed32x48","ufixed32x56","ufixed32x64","ufixed32x72","ufixed32x80","ufixed32x88","ufixed32x96","ufixed32x104","ufixed32x112","ufixed32x120","ufixed32x128","ufixed32x136","ufixed32x144","ufixed32x152","ufixed32x160","ufixed32x168","ufixed32x176","ufixed32x184","ufixed32x192","ufixed32x200","ufixed32x208","ufixed32x216","ufixed32x224","ufixed40x8","ufixed40x16","ufixed40x24","ufixed40x32","ufixed40x40","ufixed40x48","ufixed40x56","ufixed40x64","ufixed40x72","ufixed40x80","ufixed40x88","ufixed40x96","ufixed40x104","ufixed40x112","ufixed40x120","ufixed40x128","ufixed40x136","ufixed40x144","ufixed40x152","ufixed40x160","ufixed40x168","ufixed40x176","ufixed40x184","ufixed40x192","ufixed40x200","ufixed40x208","ufixed40x216","ufixed48x8","ufixed48x16","ufixed48x24","ufixed48x32","ufixed48x40","ufixed48x48","ufixed48x56","ufixed48x64","ufixed48x72","ufixed48x80","ufixed48x88","ufixed48x96","ufixed48x104","ufixed48x112","ufixed48x120","ufixed48x128","ufixed48x136","ufixed48x144","ufixed48x152","ufixed48x160","ufixed48x168","ufixed48x176","ufixed48x184","ufixed48x192","ufixed48x200","ufixed48x208","ufixed56x8","ufixed56x16","ufixed56x24","ufixed56x32","ufixed56x40","ufixed56x48","ufixed56x56","ufixed56x64","ufixed56x72","ufixed56x80","ufixed56x88","ufixed56x96","ufixed56x104","ufixed56x112","ufixed56x120","ufixed56x128","ufixed56x136","ufixed56x144","ufixed56x152","ufixed56x160","ufixed56x168","ufixed56x176","ufixed56x184","ufixed56x192","ufixed56x200","ufixed64x8","ufixed64x16","ufixed64x24","ufixed64x32","ufixed64x40","ufixed64x48","ufixed64x56","ufixed64x64","ufixed64x72","ufixed64x80","ufixed64x88","ufixed64x96","ufixed64x104","ufixed64x112","ufixed64x120","ufixed64x128","ufixed64x136","ufixed64x144","ufixed64x152","ufixed64x160","ufixed64x168","ufixed64x176","ufixed64x184","ufixed64x192","ufixed72x8","ufixed72x16","ufixed72x24","ufixed72x32","ufixed72x40","ufixed72x48","ufixed72x56","ufixed72x64","ufixed72x72","ufixed72x80","ufixed72x88","ufixed72x96","ufixed72x104","ufixed72x112","ufixed72x120","ufixed72x128","ufixed72x136","ufixed72x144","ufixed72x152","ufixed72x160","ufixed72x168","ufixed72x176","ufixed72x184","ufixed80x8","ufixed80x16","ufixed80x24","ufixed80x32","ufixed80x40","ufixed80x48","ufixed80x56","ufixed80x64","ufixed80x72","ufixed80x80","ufixed80x88","ufixed80x96","ufixed80x104","ufixed80x112","ufixed80x120","ufixed80x128","ufixed80x136","ufixed80x144","ufixed80x152","ufixed80x160","ufixed80x168","ufixed80x176","ufixed88x8","ufixed88x16","ufixed88x24","ufixed88x32","ufixed88x40","ufixed88x48","ufixed88x56","ufixed88x64","ufixed88x72","ufixed88x80","ufixed88x88","ufixed88x96","ufixed88x104","ufixed88x112","ufixed88x120","ufixed88x128","ufixed88x136","ufixed88x144","ufixed88x152","ufixed88x160","ufixed88x168","ufixed96x8","ufixed96x16","ufixed96x24","ufixed96x32","ufixed96x40","ufixed96x48","ufixed96x56","ufixed96x64","ufixed96x72","ufixed96x80","ufixed96x88","ufixed96x96","ufixed96x104","ufixed96x112","ufixed96x120","ufixed96x128","ufixed96x136","ufixed96x144","ufixed96x152","ufixed96x160","ufixed104x8","ufixed104x16","ufixed104x24","ufixed104x32","ufixed104x40","ufixed104x48","ufixed104x56","ufixed104x64","ufixed104x72","ufixed104x80","ufixed104x88","ufixed104x96","ufixed104x104","ufixed104x112","ufixed104x120","ufixed104x128","ufixed104x136","ufixed104x144","ufixed104x152","ufixed112x8","ufixed112x16","ufixed112x24","ufixed112x32","ufixed112x40","ufixed112x48","ufixed112x56","ufixed112x64","ufixed112x72","ufixed112x80","ufixed112x88","ufixed112x96","ufixed112x104","ufixed112x112","ufixed112x120","ufixed112x128","ufixed112x136","ufixed112x144","ufixed120x8","ufixed120x16","ufixed120x24","ufixed120x32","ufixed120x40","ufixed120x48","ufixed120x56","ufixed120x64","ufixed120x72","ufixed120x80","ufixed120x88","ufixed120x96","ufixed120x104","ufixed120x112","ufixed120x120","ufixed120x128","ufixed120x136","ufixed128x8","ufixed128x16","ufixed128x24","ufixed128x32","ufixed128x40","ufixed128x48","ufixed128x56","ufixed128x64","ufixed128x72","ufixed128x80","ufixed128x88","ufixed128x96","ufixed128x104","ufixed128x112","ufixed128x120","ufixed128x128","ufixed136x8","ufixed136x16","ufixed136x24","ufixed136x32","ufixed136x40","ufixed136x48","ufixed136x56","ufixed136x64","ufixed136x72","ufixed136x80","ufixed136x88","ufixed136x96","ufixed136x104","ufixed136x112","ufixed136x120","ufixed144x8","ufixed144x16","ufixed144x24","ufixed144x32","ufixed144x40","ufixed144x48","ufixed144x56","ufixed144x64","ufixed144x72","ufixed144x80","ufixed144x88","ufixed144x96","ufixed144x104","ufixed144x112","ufixed152x8","ufixed152x16","ufixed152x24","ufixed152x32","ufixed152x40","ufixed152x48","ufixed152x56","ufixed152x64","ufixed152x72","ufixed152x80","ufixed152x88","ufixed152x96","ufixed152x104","ufixed160x8","ufixed160x16","ufixed160x24","ufixed160x32","ufixed160x40","ufixed160x48","ufixed160x56","ufixed160x64","ufixed160x72","ufixed160x80","ufixed160x88","ufixed160x96","ufixed168x8","ufixed168x16","ufixed168x24","ufixed168x32","ufixed168x40","ufixed168x48","ufixed168x56","ufixed168x64","ufixed168x72","ufixed168x80","ufixed168x88","ufixed176x8","ufixed176x16","ufixed176x24","ufixed176x32","ufixed176x40","ufixed176x48","ufixed176x56","ufixed176x64","ufixed176x72","ufixed176x80","ufixed184x8","ufixed184x16","ufixed184x24","ufixed184x32","ufixed184x40","ufixed184x48","ufixed184x56","ufixed184x64","ufixed184x72","ufixed192x8","ufixed192x16","ufixed192x24","ufixed192x32","ufixed192x40","ufixed192x48","ufixed192x56","ufixed192x64","ufixed200x8","ufixed200x16","ufixed200x24","ufixed200x32","ufixed200x40","ufixed200x48","ufixed200x56","ufixed208x8","ufixed208x16","ufixed208x24","ufixed208x32","ufixed208x40","ufixed208x48","ufixed216x8","ufixed216x16","ufixed216x24","ufixed216x32","ufixed216x40","ufixed224x8","ufixed224x16","ufixed224x24","ufixed224x32","ufixed232x8","ufixed232x16","ufixed232x24","ufixed240x8","ufixed240x16","ufixed248x8","event","enum","let","mapping","private","public","external","inherited","payable","true","false","var","import","constant","if","else","for","else","for","while","do","break","continue","throw","returns","return","suicide","new","is","this","super"],operators:["=",">","<","!","~","?",":","==","<=",">=","!=","&&","||","++","--","+","-","*","/","&","|","^","%","<<",">>",">>>","+=","-=","*=","/=","&=","|=","^=","%=","<<=",">>=",">>>="],symbols:/[=><!~?:&|+\-*\/\^%]+/,escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,integersuffix:/(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,floatsuffix:/[fFlL]?/,tokenizer:{root:[[/[a-zA-Z_]\w*/,{cases:{"@keywords":{token:"keyword.$0"},"@default":"identifier"}}],{include:"@whitespace"},[/\[\[.*\]\]/,"annotation"],[/^\s*#\w+/,"keyword"],[/int\d*/,"keyword"],[/[{}()\[\]]/,"@brackets"],[/[<>](?!@symbols)/,"@brackets"],[/@symbols/,{cases:{"@operators":"delimiter","@default":""}}],[/\d*\d+[eE]([\-+]?\d+)?(@floatsuffix)/,"number.float"],[/\d*\.\d+([eE][\-+]?\d+)?(@floatsuffix)/,"number.float"],[/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/,"number.hex"],[/0[0-7']*[0-7](@integersuffix)/,"number.octal"],[/0[bB][0-1']*[0-1](@integersuffix)/,"number.binary"],[/\d[\d']*\d(@integersuffix)/,"number"],[/\d(@integersuffix)/,"number"],[/[;,.]/,"delimiter"],[/"([^"\\]|\\.)*$/,"string.invalid"],[/"/,"string","@string"],[/'[^\\']'/,"string"],[/(')(@escapes)(')/,["string","string.escape","string"]],[/'/,"string.invalid"]],whitespace:[[/[ \t\r\n]+/,""],[/\/\*\*(?!\/)/,"comment.doc","@doccomment"],[/\/\*/,"comment","@comment"],[/\/\/.*$/,"comment"]],comment:[[/[^\/*]+/,"comment"],[/\*\//,"comment","@pop"],[/[\/*]/,"comment"]],doccomment:[[/[^\/*]+/,"comment.doc"],[/\*\//,"comment.doc","@pop"],[/[\/*]/,"comment.doc"]],string:[[/[^\\"]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/"/,"string","@pop"]]}}},8183:(e,n,t)=>{t.r(n),t.d(n,{getJavaScriptWorker:()=>P,getTypeScriptWorker:()=>$,setupJavaScript:()=>M,setupTypeScript:()=>B});var i,r,o=t(1429),s=function(){function e(e,n){var t=this;this._modeId=e,this._defaults=n,this._worker=null,this._client=null,this._configChangeListener=this._defaults.onDidChange((function(){return t._stopWorker()})),this._updateExtraLibsToken=0,this._extraLibsChangeListener=this._defaults.onDidExtraLibsChange((function(){return t._updateExtraLibs()}))}return e.prototype._stopWorker=function(){this._worker&&(this._worker.dispose(),this._worker=null),this._client=null},e.prototype.dispose=function(){this._configChangeListener.dispose(),this._extraLibsChangeListener.dispose(),this._stopWorker()},e.prototype._updateExtraLibs=function(){return e=this,n=void 0,i=function(){var e,n;return function(e,n){var t,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;s;)try{if(t=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,i=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){s.label=o[1];break}if(6===o[0]&&s.label<r[1]){s.label=r[1],r=o;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(o);break}r[2]&&s.ops.pop(),s.trys.pop();continue}o=n.call(e,s)}catch(e){o=[6,e],i=0}finally{t=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}(this,(function(t){switch(t.label){case 0:return this._worker?(e=++this._updateExtraLibsToken,[4,this._worker.getProxy()]):[2];case 1:return n=t.sent(),this._updateExtraLibsToken!==e||n.updateExtraLibs(this._defaults.getExtraLibs()),[2]}}))},new((t=void 0)||(t=Promise))((function(r,o){function s(e){try{d(i.next(e))}catch(e){o(e)}}function a(e){try{d(i.throw(e))}catch(e){o(e)}}function d(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,a)}d((i=i.apply(e,n||[])).next())}));var e,n,t,i},e.prototype._getClient=function(){var e=this;if(!this._client){this._worker=o.j6.createWebWorker({moduleId:"vs/language/typescript/tsWorker",label:this._modeId,keepIdleModels:!0,createData:{compilerOptions:this._defaults.getCompilerOptions(),extraLibs:this._defaults.getExtraLibs(),customWorkerPath:this._defaults.workerOptions.customWorkerPath,inlayHintsOptions:this._defaults.inlayHintsOptions}});var n=this._worker.getProxy();this._defaults.getEagerModelSync()&&(n=n.then((function(n){return e._worker?e._worker.withSyncedResources(o.j6.getModels().filter((function(n){return n.getLanguageId()===e._modeId})).map((function(e){return e.uri}))):n}))),this._client=n}return this._client},e.prototype.getLanguageServiceWorker=function(){for(var e,n=this,t=[],i=0;i<arguments.length;i++)t[i]=arguments[i];return this._getClient().then((function(n){e=n})).then((function(e){if(n._worker)return n._worker.withSyncedResources(t)})).then((function(n){return e}))},e}(),a=t(8828),d={"lib.d.ts":!0,"lib.dom.d.ts":!0,"lib.dom.iterable.d.ts":!0,"lib.es2015.collection.d.ts":!0,"lib.es2015.core.d.ts":!0,"lib.es2015.d.ts":!0,"lib.es2015.generator.d.ts":!0,"lib.es2015.iterable.d.ts":!0,"lib.es2015.promise.d.ts":!0,"lib.es2015.proxy.d.ts":!0,"lib.es2015.reflect.d.ts":!0,"lib.es2015.symbol.d.ts":!0,"lib.es2015.symbol.wellknown.d.ts":!0,"lib.es2016.array.include.d.ts":!0,"lib.es2016.d.ts":!0,"lib.es2016.full.d.ts":!0,"lib.es2017.d.ts":!0,"lib.es2017.full.d.ts":!0,"lib.es2017.intl.d.ts":!0,"lib.es2017.object.d.ts":!0,"lib.es2017.sharedmemory.d.ts":!0,"lib.es2017.string.d.ts":!0,"lib.es2017.typedarrays.d.ts":!0,"lib.es2018.asyncgenerator.d.ts":!0,"lib.es2018.asynciterable.d.ts":!0,"lib.es2018.d.ts":!0,"lib.es2018.full.d.ts":!0,"lib.es2018.intl.d.ts":!0,"lib.es2018.promise.d.ts":!0,"lib.es2018.regexp.d.ts":!0,"lib.es2019.array.d.ts":!0,"lib.es2019.d.ts":!0,"lib.es2019.full.d.ts":!0,"lib.es2019.object.d.ts":!0,"lib.es2019.string.d.ts":!0,"lib.es2019.symbol.d.ts":!0,"lib.es2020.bigint.d.ts":!0,"lib.es2020.d.ts":!0,"lib.es2020.full.d.ts":!0,"lib.es2020.intl.d.ts":!0,"lib.es2020.promise.d.ts":!0,"lib.es2020.sharedmemory.d.ts":!0,"lib.es2020.string.d.ts":!0,"lib.es2020.symbol.wellknown.d.ts":!0,"lib.es2021.d.ts":!0,"lib.es2021.full.d.ts":!0,"lib.es2021.promise.d.ts":!0,"lib.es2021.string.d.ts":!0,"lib.es2021.weakref.d.ts":!0,"lib.es5.d.ts":!0,"lib.es6.d.ts":!0,"lib.esnext.d.ts":!0,"lib.esnext.full.d.ts":!0,"lib.esnext.intl.d.ts":!0,"lib.esnext.promise.d.ts":!0,"lib.esnext.string.d.ts":!0,"lib.esnext.weakref.d.ts":!0,"lib.scripthost.d.ts":!0,"lib.webworker.d.ts":!0,"lib.webworker.importscripts.d.ts":!0,"lib.webworker.iterable.d.ts":!0},l=(i=function(e,n){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},i(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}i(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),c=function(){return c=Object.assign||function(e){for(var n,t=1,i=arguments.length;t<i;t++)for(var r in n=arguments[t])Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);return e},c.apply(this,arguments)},x=function(e,n,t,i){return new(t||(t=Promise))((function(r,o){function s(e){try{d(i.next(e))}catch(e){o(e)}}function a(e){try{d(i.throw(e))}catch(e){o(e)}}function d(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,a)}d((i=i.apply(e,n||[])).next())}))},u=function(e,n){var t,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;s;)try{if(t=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,i=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){s.label=o[1];break}if(6===o[0]&&s.label<r[1]){s.label=r[1],r=o;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(o);break}r[2]&&s.ops.pop(),s.trys.pop();continue}o=n.call(e,s)}catch(e){o=[6,e],i=0}finally{t=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};function f(e,n,t){if(void 0===t&&(t=0),"string"==typeof e)return e;if(void 0===e)return"";var i="";if(t){i+=n;for(var r=0;r<t;r++)i+="  "}if(i+=e.messageText,t++,e.next)for(var o=0,s=e.next;o<s.length;o++)i+=f(s[o],n,t);return i}function p(e){return e?e.map((function(e){return e.text})).join(""):""}!function(e){e[e.None=0]="None",e[e.Block=1]="Block",e[e.Smart=2]="Smart"}(r||(r={}));var m,g=function(){function e(e){this._worker=e}return e.prototype._textSpanToRange=function(e,n){var t=e.getPositionAt(n.start),i=e.getPositionAt(n.start+n.length);return{startLineNumber:t.lineNumber,startColumn:t.column,endLineNumber:i.lineNumber,endColumn:i.column}},e}(),h=function(){function e(e){this._worker=e,this._libFiles={},this._hasFetchedLibFiles=!1,this._fetchLibFilesPromise=null}return e.prototype.isLibFile=function(e){return!!e&&0===e.path.indexOf("/lib.")&&!!d[e.path.slice(1)]},e.prototype.getOrCreateModel=function(e){var n=o.Sf.parse(e),t=o.j6.getModel(n);if(t)return t;if(this.isLibFile(n)&&this._hasFetchedLibFiles)return o.j6.createModel(this._libFiles[n.path.slice(1)],"typescript",n);var i=a.TG.getExtraLibs()[e];return i?o.j6.createModel(i.content,"typescript",n):null},e.prototype._containsLibFile=function(e){for(var n=0,t=e;n<t.length;n++){var i=t[n];if(this.isLibFile(i))return!0}return!1},e.prototype.fetchLibFilesIfNecessary=function(e){return x(this,void 0,void 0,(function(){return u(this,(function(n){switch(n.label){case 0:return this._containsLibFile(e)?[4,this._fetchLibFiles()]:[2];case 1:return n.sent(),[2]}}))}))},e.prototype._fetchLibFiles=function(){var e=this;return this._fetchLibFilesPromise||(this._fetchLibFilesPromise=this._worker().then((function(e){return e.getLibFiles()})).then((function(n){e._hasFetchedLibFiles=!0,e._libFiles=n}))),this._fetchLibFilesPromise},e}();!function(e){e[e.Warning=0]="Warning",e[e.Error=1]="Error",e[e.Suggestion=2]="Suggestion",e[e.Message=3]="Message"}(m||(m={}));var b=function(e){function n(n,t,i,r){var s=e.call(this,r)||this;s._libFiles=n,s._defaults=t,s._selector=i,s._disposables=[],s._listener=Object.create(null);var a=function(e){if(e.getLanguageId()===i){var n,t=function(){s._defaults.getDiagnosticsOptions().onlyVisible?e.isAttachedToEditor()&&s._doValidate(e):s._doValidate(e)},r=e.onDidChangeContent((function(){clearTimeout(n),n=window.setTimeout(t,500)})),a=e.onDidChangeAttached((function(){s._defaults.getDiagnosticsOptions().onlyVisible&&(e.isAttachedToEditor()?t():o.j6.setModelMarkers(e,s._selector,[]))}));s._listener[e.uri.toString()]={dispose:function(){r.dispose(),a.dispose(),clearTimeout(n)}},t()}},d=function(e){o.j6.setModelMarkers(e,s._selector,[]);var n=e.uri.toString();s._listener[n]&&(s._listener[n].dispose(),delete s._listener[n])};s._disposables.push(o.j6.onDidCreateModel((function(e){return a(e)}))),s._disposables.push(o.j6.onWillDisposeModel(d)),s._disposables.push(o.j6.onDidChangeModelLanguage((function(e){d(e.model),a(e.model)}))),s._disposables.push({dispose:function(){for(var e=0,n=o.j6.getModels();e<n.length;e++){var t=n[e];d(t)}}});var l=function(){for(var e=0,n=o.j6.getModels();e<n.length;e++){var t=n[e];d(t),a(t)}};return s._disposables.push(s._defaults.onDidChange(l)),s._disposables.push(s._defaults.onDidExtraLibsChange(l)),o.j6.getModels().forEach((function(e){return a(e)})),s}return l(n,e),n.prototype.dispose=function(){this._disposables.forEach((function(e){return e&&e.dispose()})),this._disposables=[]},n.prototype._doValidate=function(e){return x(this,void 0,void 0,(function(){var n,t,i,r,s,a,d,l,c,x=this;return u(this,(function(u){switch(u.label){case 0:return[4,this._worker(e.uri)];case 1:return n=u.sent(),e.isDisposed()?[2]:(t=[],i=this._defaults.getDiagnosticsOptions(),r=i.noSyntaxValidation,s=i.noSemanticValidation,a=i.noSuggestionDiagnostics,r||t.push(n.getSyntacticDiagnostics(e.uri.toString())),s||t.push(n.getSemanticDiagnostics(e.uri.toString())),a||t.push(n.getSuggestionDiagnostics(e.uri.toString())),[4,Promise.all(t)]);case 2:return!(d=u.sent())||e.isDisposed()?[2]:(l=d.reduce((function(e,n){return n.concat(e)}),[]).filter((function(e){return-1===(x._defaults.getDiagnosticsOptions().diagnosticCodesToIgnore||[]).indexOf(e.code)})),c=l.map((function(e){return e.relatedInformation||[]})).reduce((function(e,n){return n.concat(e)}),[]).map((function(e){return e.file?o.Sf.parse(e.file.fileName):null})),[4,this._libFiles.fetchLibFilesIfNecessary(c)]);case 3:return u.sent(),e.isDisposed()||o.j6.setModelMarkers(e,this._selector,l.map((function(n){return x._convertDiagnostics(e,n)}))),[2]}}))}))},n.prototype._convertDiagnostics=function(e,n){var t=n.start||0,i=n.length||1,r=e.getPositionAt(t),s=r.lineNumber,a=r.column,d=e.getPositionAt(t+i),l=d.lineNumber,c=d.column,x=[];return n.reportsUnnecessary&&x.push(o.eB.Unnecessary),n.reportsDeprecated&&x.push(o.eB.Deprecated),{severity:this._tsDiagnosticCategoryToMarkerSeverity(n.category),startLineNumber:s,startColumn:a,endLineNumber:l,endColumn:c,message:f(n.messageText,"\n"),code:n.code.toString(),tags:x,relatedInformation:this._convertRelatedInformation(e,n.relatedInformation)}},n.prototype._convertRelatedInformation=function(e,n){var t=this;if(!n)return[];var i=[];return n.forEach((function(n){var r=e;if(n.file&&(r=t._libFiles.getOrCreateModel(n.file.fileName)),r){var o=n.start||0,s=n.length||1,a=r.getPositionAt(o),d=a.lineNumber,l=a.column,c=r.getPositionAt(o+s),x=c.lineNumber,u=c.column;i.push({resource:r.uri,startLineNumber:d,startColumn:l,endLineNumber:x,endColumn:u,message:f(n.messageText,"\n")})}})),i},n.prototype._tsDiagnosticCategoryToMarkerSeverity=function(e){switch(e){case m.Error:return o.ZL.Error;case m.Message:return o.ZL.Info;case m.Warning:return o.ZL.Warning;case m.Suggestion:return o.ZL.Hint}return o.ZL.Info},n}(g),_=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return l(n,e),Object.defineProperty(n.prototype,"triggerCharacters",{get:function(){return["."]},enumerable:!1,configurable:!0}),n.prototype.provideCompletionItems=function(e,t,i,r){return x(this,void 0,void 0,(function(){var i,r,s,a,d,l,c;return u(this,(function(x){switch(x.label){case 0:return i=e.getWordUntilPosition(t),r=new o.e6(t.lineNumber,i.startColumn,t.lineNumber,i.endColumn),s=e.uri,a=e.getOffsetAt(t),[4,this._worker(s)];case 1:return d=x.sent(),e.isDisposed()?[2]:[4,d.getCompletionsAtPosition(s.toString(),a)];case 2:return!(l=x.sent())||e.isDisposed()?[2]:(c=l.entries.map((function(i){var d,l=r;if(i.replacementSpan){var c=e.getPositionAt(i.replacementSpan.start),x=e.getPositionAt(i.replacementSpan.start+i.replacementSpan.length);l=new o.e6(c.lineNumber,c.column,x.lineNumber,x.column)}var u=[];return-1!==(null===(d=i.kindModifiers)||void 0===d?void 0:d.indexOf("deprecated"))&&u.push(o.Mj.CompletionItemTag.Deprecated),{uri:s,position:t,offset:a,range:l,label:i.name,insertText:i.name,sortText:i.sortText,kind:n.convertKind(i.kind),tags:u}})),[2,{suggestions:c}])}}))}))},n.prototype.resolveCompletionItem=function(e,t){return x(this,void 0,void 0,(function(){var t,i,r,o,s;return u(this,(function(a){switch(a.label){case 0:return i=(t=e).uri,r=t.position,o=t.offset,[4,this._worker(i)];case 1:return[4,a.sent().getCompletionEntryDetails(i.toString(),o,t.label)];case 2:return(s=a.sent())?[2,{uri:i,position:r,label:s.name,kind:n.convertKind(s.kind),detail:p(s.displayParts),documentation:{value:n.createDocumentationString(s)}}]:[2,t]}}))}))},n.convertKind=function(e){switch(e){case T.primitiveType:case T.keyword:return o.Mj.CompletionItemKind.Keyword;case T.variable:case T.localVariable:return o.Mj.CompletionItemKind.Variable;case T.memberVariable:case T.memberGetAccessor:case T.memberSetAccessor:return o.Mj.CompletionItemKind.Field;case T.function:case T.memberFunction:case T.constructSignature:case T.callSignature:case T.indexSignature:return o.Mj.CompletionItemKind.Function;case T.enum:return o.Mj.CompletionItemKind.Enum;case T.module:return o.Mj.CompletionItemKind.Module;case T.class:return o.Mj.CompletionItemKind.Class;case T.interface:return o.Mj.CompletionItemKind.Interface;case T.warning:return o.Mj.CompletionItemKind.File}return o.Mj.CompletionItemKind.Property},n.createDocumentationString=function(e){var n=p(e.documentation);if(e.tags)for(var t=0,i=e.tags;t<i.length;t++)n+="\n\n"+y(i[t]);return n},n}(g);function y(e){var n="*@"+e.name+"*";if("param"===e.name&&e.text){var t=e.text,i=t[0],r=t.slice(1);n+="`"+i.text+"`",r.length>0&&(n+=" — "+r.map((function(e){return e.text})).join(" "))}else Array.isArray(e.text)?n+=" — "+e.text.map((function(e){return e.text})).join(" "):e.text&&(n+=" — "+e.text);return n}var S=function(e){function n(){var n=null!==e&&e.apply(this,arguments)||this;return n.signatureHelpTriggerCharacters=["(",","],n}return l(n,e),n._toSignatureHelpTriggerReason=function(e){switch(e.triggerKind){case o.Mj.SignatureHelpTriggerKind.TriggerCharacter:return e.triggerCharacter?e.isRetrigger?{kind:"retrigger",triggerCharacter:e.triggerCharacter}:{kind:"characterTyped",triggerCharacter:e.triggerCharacter}:{kind:"invoked"};case o.Mj.SignatureHelpTriggerKind.ContentChange:return e.isRetrigger?{kind:"retrigger"}:{kind:"invoked"};case o.Mj.SignatureHelpTriggerKind.Invoke:default:return{kind:"invoked"}}},n.prototype.provideSignatureHelp=function(e,t,i,r){return x(this,void 0,void 0,(function(){var i,o,s,a,d;return u(this,(function(l){switch(l.label){case 0:return i=e.uri,o=e.getOffsetAt(t),[4,this._worker(i)];case 1:return s=l.sent(),e.isDisposed()?[2]:[4,s.getSignatureHelpItems(i.toString(),o,{triggerReason:n._toSignatureHelpTriggerReason(r)})];case 2:return!(a=l.sent())||e.isDisposed()?[2]:(d={activeSignature:a.selectedItemIndex,activeParameter:a.argumentIndex,signatures:[]},a.items.forEach((function(e){var n={label:"",parameters:[]};n.documentation={value:p(e.documentation)},n.label+=p(e.prefixDisplayParts),e.parameters.forEach((function(t,i,r){var o=p(t.displayParts),s={label:o,documentation:{value:p(t.documentation)}};n.label+=o,n.parameters.push(s),i<r.length-1&&(n.label+=p(e.separatorDisplayParts))})),n.label+=p(e.suffixDisplayParts),d.signatures.push(n)})),[2,{value:d,dispose:function(){}}])}}))}))},n}(g),k=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return l(n,e),n.prototype.provideHover=function(e,n,t){return x(this,void 0,void 0,(function(){var t,i,r,o,s,a,d;return u(this,(function(l){switch(l.label){case 0:return t=e.uri,i=e.getOffsetAt(n),[4,this._worker(t)];case 1:return r=l.sent(),e.isDisposed()?[2]:[4,r.getQuickInfoAtPosition(t.toString(),i)];case 2:return!(o=l.sent())||e.isDisposed()?[2]:(s=p(o.documentation),a=o.tags?o.tags.map((function(e){return y(e)})).join("  \n\n"):"",d=p(o.displayParts),[2,{range:this._textSpanToRange(e,o.textSpan),contents:[{value:"```typescript\n"+d+"\n```\n"},{value:s+(a?"\n\n"+a:"")}]}])}}))}))},n}(g),E=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return l(n,e),n.prototype.provideDocumentHighlights=function(e,n,t){return x(this,void 0,void 0,(function(){var t,i,r,s,a=this;return u(this,(function(d){switch(d.label){case 0:return t=e.uri,i=e.getOffsetAt(n),[4,this._worker(t)];case 1:return r=d.sent(),e.isDisposed()?[2]:[4,r.getOccurrencesAtPosition(t.toString(),i)];case 2:return!(s=d.sent())||e.isDisposed()?[2]:[2,s.map((function(n){return{range:a._textSpanToRange(e,n.textSpan),kind:n.isWriteAccess?o.Mj.DocumentHighlightKind.Write:o.Mj.DocumentHighlightKind.Text}}))]}}))}))},n}(g),v=function(e){function n(n,t){var i=e.call(this,t)||this;return i._libFiles=n,i}return l(n,e),n.prototype.provideDefinition=function(e,n,t){return x(this,void 0,void 0,(function(){var t,i,r,s,a,d,l,c,x;return u(this,(function(u){switch(u.label){case 0:return t=e.uri,i=e.getOffsetAt(n),[4,this._worker(t)];case 1:return r=u.sent(),e.isDisposed()?[2]:[4,r.getDefinitionAtPosition(t.toString(),i)];case 2:return!(s=u.sent())||e.isDisposed()?[2]:[4,this._libFiles.fetchLibFilesIfNecessary(s.map((function(e){return o.Sf.parse(e.fileName)})))];case 3:if(u.sent(),e.isDisposed())return[2];for(a=[],d=0,l=s;d<l.length;d++)c=l[d],(x=this._libFiles.getOrCreateModel(c.fileName))&&a.push({uri:x.uri,range:this._textSpanToRange(x,c.textSpan)});return[2,a]}}))}))},n}(g),w=function(e){function n(n,t){var i=e.call(this,t)||this;return i._libFiles=n,i}return l(n,e),n.prototype.provideReferences=function(e,n,t,i){return x(this,void 0,void 0,(function(){var t,i,r,s,a,d,l,c,x;return u(this,(function(u){switch(u.label){case 0:return t=e.uri,i=e.getOffsetAt(n),[4,this._worker(t)];case 1:return r=u.sent(),e.isDisposed()?[2]:[4,r.getReferencesAtPosition(t.toString(),i)];case 2:return!(s=u.sent())||e.isDisposed()?[2]:[4,this._libFiles.fetchLibFilesIfNecessary(s.map((function(e){return o.Sf.parse(e.fileName)})))];case 3:if(u.sent(),e.isDisposed())return[2];for(a=[],d=0,l=s;d<l.length;d++)c=l[d],(x=this._libFiles.getOrCreateModel(c.fileName))&&a.push({uri:x.uri,range:this._textSpanToRange(x,c.textSpan)});return[2,a]}}))}))},n}(g),D=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return l(n,e),n.prototype.provideDocumentSymbols=function(e,n){return x(this,void 0,void 0,(function(){var n,t,i,r,s,a=this;return u(this,(function(d){switch(d.label){case 0:return n=e.uri,[4,this._worker(n)];case 1:return t=d.sent(),e.isDisposed()?[2]:[4,t.getNavigationBarItems(n.toString())];case 2:return!(i=d.sent())||e.isDisposed()?[2]:(r=function(n,t,i){var s={name:t.text,detail:"",kind:A[t.kind]||o.Mj.SymbolKind.Variable,range:a._textSpanToRange(e,t.spans[0]),selectionRange:a._textSpanToRange(e,t.spans[0]),tags:[]};if(i&&(s.containerName=i),t.childItems&&t.childItems.length>0)for(var d=0,l=t.childItems;d<l.length;d++){var c=l[d];r(n,c,s.name)}n.push(s)},s=[],i.forEach((function(e){return r(s,e)})),[2,s])}}))}))},n}(g),T=function(){function e(){}return e.unknown="",e.keyword="keyword",e.script="script",e.module="module",e.class="class",e.interface="interface",e.type="type",e.enum="enum",e.variable="var",e.localVariable="local var",e.function="function",e.localFunction="local function",e.memberFunction="method",e.memberGetAccessor="getter",e.memberSetAccessor="setter",e.memberVariable="property",e.constructorImplementation="constructor",e.callSignature="call",e.indexSignature="index",e.constructSignature="construct",e.parameter="parameter",e.typeParameter="type parameter",e.primitiveType="primitive type",e.label="label",e.alias="alias",e.const="const",e.let="let",e.warning="warning",e}(),A=Object.create(null);A[T.module]=o.Mj.SymbolKind.Module,A[T.class]=o.Mj.SymbolKind.Class,A[T.enum]=o.Mj.SymbolKind.Enum,A[T.interface]=o.Mj.SymbolKind.Interface,A[T.memberFunction]=o.Mj.SymbolKind.Method,A[T.memberVariable]=o.Mj.SymbolKind.Property,A[T.memberGetAccessor]=o.Mj.SymbolKind.Property,A[T.memberSetAccessor]=o.Mj.SymbolKind.Property,A[T.variable]=o.Mj.SymbolKind.Variable,A[T.const]=o.Mj.SymbolKind.Variable,A[T.localVariable]=o.Mj.SymbolKind.Variable,A[T.variable]=o.Mj.SymbolKind.Variable,A[T.function]=o.Mj.SymbolKind.Function,A[T.localFunction]=o.Mj.SymbolKind.Function;var O,I,R=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return l(n,e),n._convertOptions=function(e){return{ConvertTabsToSpaces:e.insertSpaces,TabSize:e.tabSize,IndentSize:e.tabSize,IndentStyle:r.Smart,NewLineCharacter:"\n",InsertSpaceAfterCommaDelimiter:!0,InsertSpaceAfterSemicolonInForStatements:!0,InsertSpaceBeforeAndAfterBinaryOperators:!0,InsertSpaceAfterKeywordsInControlFlowStatements:!0,InsertSpaceAfterFunctionKeywordForAnonymousFunctions:!0,InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis:!1,InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets:!1,InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces:!1,PlaceOpenBraceOnNewLineForControlBlocks:!1,PlaceOpenBraceOnNewLineForFunctions:!1}},n.prototype._convertTextChanges=function(e,n){return{text:n.newText,range:this._textSpanToRange(e,n.span)}},n}(g),C=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return l(n,e),n.prototype.provideDocumentRangeFormattingEdits=function(e,n,t,i){return x(this,void 0,void 0,(function(){var i,r,o,s,a,d=this;return u(this,(function(l){switch(l.label){case 0:return i=e.uri,r=e.getOffsetAt({lineNumber:n.startLineNumber,column:n.startColumn}),o=e.getOffsetAt({lineNumber:n.endLineNumber,column:n.endColumn}),[4,this._worker(i)];case 1:return s=l.sent(),e.isDisposed()?[2]:[4,s.getFormattingEditsForRange(i.toString(),r,o,R._convertOptions(t))];case 2:return!(a=l.sent())||e.isDisposed()?[2]:[2,a.map((function(n){return d._convertTextChanges(e,n)}))]}}))}))},n}(R),N=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return l(n,e),Object.defineProperty(n.prototype,"autoFormatTriggerCharacters",{get:function(){return[";","}","\n"]},enumerable:!1,configurable:!0}),n.prototype.provideOnTypeFormattingEdits=function(e,n,t,i,r){return x(this,void 0,void 0,(function(){var r,o,s,a,d=this;return u(this,(function(l){switch(l.label){case 0:return r=e.uri,o=e.getOffsetAt(n),[4,this._worker(r)];case 1:return s=l.sent(),e.isDisposed()?[2]:[4,s.getFormattingEditsAfterKeystroke(r.toString(),o,t,R._convertOptions(i))];case 2:return!(a=l.sent())||e.isDisposed()?[2]:[2,a.map((function(n){return d._convertTextChanges(e,n)}))]}}))}))},n}(R),L=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return l(n,e),n.prototype.provideCodeActions=function(e,n,t,i){return x(this,void 0,void 0,(function(){var i,r,o,s,a,d,l,c=this;return u(this,(function(x){switch(x.label){case 0:return i=e.uri,r=e.getOffsetAt({lineNumber:n.startLineNumber,column:n.startColumn}),o=e.getOffsetAt({lineNumber:n.endLineNumber,column:n.endColumn}),s=R._convertOptions(e.getOptions()),a=t.markers.filter((function(e){return e.code})).map((function(e){return e.code})).map(Number),[4,this._worker(i)];case 1:return d=x.sent(),e.isDisposed()?[2]:[4,d.getCodeFixesAtPosition(i.toString(),r,o,a,s)];case 2:return!(l=x.sent())||e.isDisposed()?[2,{actions:[],dispose:function(){}}]:[2,{actions:l.filter((function(e){return 0===e.changes.filter((function(e){return e.isNewFile})).length})).map((function(n){return c._tsCodeFixActionToMonacoCodeAction(e,t,n)})),dispose:function(){}}]}}))}))},n.prototype._tsCodeFixActionToMonacoCodeAction=function(e,n,t){for(var i=[],r=0,o=t.changes;r<o.length;r++)for(var s=0,a=o[r].textChanges;s<a.length;s++){var d=a[s];i.push({resource:e.uri,edit:{range:this._textSpanToRange(e,d.span),text:d.newText}})}return{title:t.description,edit:{edits:i},diagnostics:n.markers,kind:"quickfix"}},n}(R),j=function(e){function n(n,t){var i=e.call(this,t)||this;return i._libFiles=n,i}return l(n,e),n.prototype.provideRenameEdits=function(e,n,t,i){return x(this,void 0,void 0,(function(){var i,r,o,s,a,d,l,c,x,f,p;return u(this,(function(u){switch(u.label){case 0:return i=e.uri,r=i.toString(),o=e.getOffsetAt(n),[4,this._worker(i)];case 1:return s=u.sent(),e.isDisposed()?[2]:[4,s.getRenameInfo(r,o,{allowRenameOfImportPath:!1})];case 2:if(!1===(a=u.sent()).canRename)return[2,{edits:[],rejectReason:a.localizedErrorMessage}];if(void 0!==a.fileToRename)throw new Error("Renaming files is not supported.");return[4,s.findRenameLocations(r,o,!1,!1,!1)];case 3:if(!(d=u.sent())||e.isDisposed())return[2];for(l=[],c=0,x=d;c<x.length;c++){if(f=x[c],!(p=this._libFiles.getOrCreateModel(f.fileName)))throw new Error("Unknown file "+f.fileName+".");l.push({resource:p.uri,edit:{range:this._textSpanToRange(p,f.textSpan),text:t}})}return[2,{edits:l}]}}))}))},n}(g),F=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return l(n,e),n.prototype.provideInlayHints=function(e,n,t){return x(this,void 0,void 0,(function(){var t,i,r,o,s,a=this;return u(this,(function(d){switch(d.label){case 0:return t=e.uri,i=t.toString(),r=e.getOffsetAt({lineNumber:n.startLineNumber,column:n.startColumn}),o=e.getOffsetAt({lineNumber:n.endLineNumber,column:n.endColumn}),[4,this._worker(t)];case 1:return s=d.sent(),e.isDisposed()?[2,[]]:[4,s.provideInlayHints(i,r,o)];case 2:return[2,d.sent().map((function(n){return c(c({},n),{position:e.getPositionAt(n.position),kind:a._convertHintKind(n.kind)})}))]}}))}))},n.prototype._convertHintKind=function(e){switch(e){case"Parameter":return o.Mj.InlayHintKind.Parameter;case"Type":return o.Mj.InlayHintKind.Type;default:return o.Mj.InlayHintKind.Other}},n}(g);function B(e){I=U(e,"typescript")}function M(e){O=U(e,"javascript")}function P(){return new Promise((function(e,n){if(!O)return n("JavaScript not registered!");e(O)}))}function $(){return new Promise((function(e,n){if(!I)return n("TypeScript not registered!");e(I)}))}function U(e,n){var t=new s(n,e),i=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.getLanguageServiceWorker.apply(t,e)},r=new h(i);return o.Mj.registerCompletionItemProvider(n,new _(i)),o.Mj.registerSignatureHelpProvider(n,new S(i)),o.Mj.registerHoverProvider(n,new k(i)),o.Mj.registerDocumentHighlightProvider(n,new E(i)),o.Mj.registerDefinitionProvider(n,new v(r,i)),o.Mj.registerReferenceProvider(n,new w(r,i)),o.Mj.registerDocumentSymbolProvider(n,new D(i)),o.Mj.registerDocumentRangeFormattingEditProvider(n,new C(i)),o.Mj.registerOnTypeFormattingEditProvider(n,new N(i)),o.Mj.registerCodeActionProvider(n,new L(i)),o.Mj.registerRenameProvider(n,new j(r,i)),o.Mj.registerInlayHintsProvider(n,new F(i)),new b(r,e,n,i),i}},726:(e,n,t)=>{t.r(n),t.d(n,{default:()=>i});const i='import gleam/bit_string\nimport gleam/list\nimport gleam/map\nimport gleam/int\nimport gleam/option\nimport gleam/result\nimport gleam/string_builder\nimport gleam/map.{Map}\nimport gleam/option.{Option}\n\n/// `Dynamic` data is data that we don\'t know the type of yet.\n/// We likely get data like this from interop with Erlang, or from\n/// IO with the outside world.\npub external type Dynamic\n\n/// Error returned when unexpected data is encountered\npub type DecodeError {\n  DecodeError(expected: String, found: String, path: List(String))\n}\n\npub type DecodeErrors =\n  List(DecodeError)\n\npub type Decoder(t) =\n  fn(Dynamic) -> Result(t, DecodeErrors)\n\n/// Converts any Gleam data into `Dynamic` data.\n///\npub fn from(a) -> Dynamic {\n  do_from(a)\n}\n\nif erlang {\n  external fn do_from(anything) -> Dynamic =\n    "gleam_stdlib" "identity"\n}\n\nif javascript {\n  external fn do_from(anything) -> Dynamic =\n    "../gleam_stdlib.mjs" "identity"\n}\n\n/// Unsafely casts a Dynamic value into any other type.\n///\n/// This is an escape hatch for the type system that may be useful when wrapping\n/// native Erlang APIs. It is to be used as a last measure only!\n///\n/// If you can avoid using this function, do!\n///\npub fn unsafe_coerce(a: Dynamic) -> anything {\n  do_unsafe_coerce(a)\n}\n\nif erlang {\n  external fn do_unsafe_coerce(Dynamic) -> a =\n    "gleam_stdlib" "identity"\n}\n\nif javascript {\n  external fn do_unsafe_coerce(Dynamic) -> a =\n    "../gleam_stdlib.mjs" "identity"\n}\n\n/// Decodes a `Dynamic` value from a `Dynamic` value.\n///\n/// This function doesn\'t seem very useful at first, but it can be convenient\n/// when you need to give a decoder function but you don\'t actually care what\n/// the to-decode value is.\n///\npub fn dynamic(value: Dynamic) -> Result(Dynamic, List(DecodeError)) {\n  Ok(value)\n}\n\n/// Checks to see whether a `Dynamic` value is a bit_string, and returns that bit string if\n/// it is.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > bit_string(from("Hello")) == bit_string.from_string("Hello")\n/// True\n///\n/// > bit_string(from(123))\n/// Error([DecodeError(expected: "BitString", found: "Int", path: [])])\n/// ```\n///\npub fn bit_string(from data: Dynamic) -> Result(BitString, DecodeErrors) {\n  decode_bit_string(data)\n}\n\nif erlang {\n  external fn decode_bit_string(Dynamic) -> Result(BitString, DecodeErrors) =\n    "gleam_stdlib" "decode_bit_string"\n}\n\nif javascript {\n  external fn decode_bit_string(Dynamic) -> Result(BitString, DecodeErrors) =\n    "../gleam_stdlib.mjs" "decode_bit_string"\n}\n\n/// Checks to see whether a `Dynamic` value is a string, and returns that string if\n/// it is.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > string(from("Hello"))\n/// Ok("Hello")\n///\n/// > string(from(123))\n/// Error([DecodeError(expected: "String", found: "Int", path: [])])\n/// ```\n///\npub fn string(from data: Dynamic) -> Result(String, DecodeErrors) {\n  decode_string(data)\n}\n\nfn map_errors(\n  result: Result(t, DecodeErrors),\n  f: fn(DecodeError) -> DecodeError,\n) -> Result(t, DecodeErrors) {\n  result.map_error(result, list.map(_, f))\n}\n\nif erlang {\n  fn decode_string(data: Dynamic) -> Result(String, DecodeErrors) {\n    bit_string(data)\n    |> map_errors(put_expected(_, "String"))\n    |> result.then(fn(raw) {\n      case bit_string.to_string(raw) {\n        Ok(string) -> Ok(string)\n        Error(Nil) ->\n          Error([DecodeError(expected: "String", found: "BitString", path: [])])\n      }\n    })\n  }\n}\n\nif javascript {\n  external fn decode_string(Dynamic) -> Result(String, DecodeErrors) =\n    "../gleam_stdlib.mjs" "decode_string"\n}\n\n/// Return a string indicating the type of the dynamic value.\n///\n/// ```gleam\n/// > classify(from("Hello"))\n/// "String"\n/// ```\n///\npub fn classify(data: Dynamic) -> String {\n  do_classify(data)\n}\n\nif erlang {\n  external fn do_classify(Dynamic) -> String =\n    "gleam_stdlib" "classify_dynamic"\n}\n\nif javascript {\n  external fn do_classify(Dynamic) -> String =\n    "../gleam_stdlib.mjs" "classify_dynamic"\n}\n\n/// Checks to see whether a `Dynamic` value is an int, and returns that int if it\n/// is.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > int(from(123))\n/// Ok(123)\n///\n/// > int(from("Hello"))\n/// Error([DecodeError(expected: "Int", found: "String", path: [])])\n/// ```\n///\npub fn int(from data: Dynamic) -> Result(Int, DecodeErrors) {\n  decode_int(data)\n}\n\nif erlang {\n  external fn decode_int(Dynamic) -> Result(Int, DecodeErrors) =\n    "gleam_stdlib" "decode_int"\n}\n\nif javascript {\n  external fn decode_int(Dynamic) -> Result(Int, DecodeErrors) =\n    "../gleam_stdlib.mjs" "decode_int"\n}\n\n/// Checks to see whether a `Dynamic` value is a float, and returns that float if\n/// it is.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > float(from(2.0))\n/// Ok(2.0)\n///\n/// > float(from(123))\n/// Error([DecodeError(expected: "Float", found: "Int", path: [])])\n/// ```\n///\npub fn float(from data: Dynamic) -> Result(Float, DecodeErrors) {\n  decode_float(data)\n}\n\nif erlang {\n  external fn decode_float(Dynamic) -> Result(Float, DecodeErrors) =\n    "gleam_stdlib" "decode_float"\n}\n\nif javascript {\n  external fn decode_float(Dynamic) -> Result(Float, DecodeErrors) =\n    "../gleam_stdlib.mjs" "decode_float"\n}\n\n/// Checks to see whether a `Dynamic` value is a bool, and returns that bool if\n/// it is.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > bool(from(True))\n/// Ok(True)\n///\n/// > bool(from(123))\n/// Error([DecodeError(expected: "bool", found: "Int", path: [])])\n/// ```\n///\npub fn bool(from data: Dynamic) -> Result(Bool, DecodeErrors) {\n  decode_bool(data)\n}\n\nif erlang {\n  external fn decode_bool(Dynamic) -> Result(Bool, DecodeErrors) =\n    "gleam_stdlib" "decode_bool"\n}\n\nif javascript {\n  external fn decode_bool(Dynamic) -> Result(Bool, DecodeErrors) =\n    "../gleam_stdlib.mjs" "decode_bool"\n}\n\n/// Checks to see whether a `Dynamic` value is a list, and returns that list if it\n/// is. The types of the elements are not checked.\n///\n/// If you wish to decode all the elements in the list use the `list`\n/// instead.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > shallow_list(from(["a", "b", "c"]))\n/// Ok([from("a"), from("b"), from("c")])\n///\n/// > shallow_list(1)\n/// Error([DecodeError(expected: "Int", found: "Int", path: [])])\n/// ```\n///\npub fn shallow_list(from value: Dynamic) -> Result(List(Dynamic), DecodeErrors) {\n  decode_list(value)\n}\n\nif erlang {\n  external fn decode_list(Dynamic) -> Result(List(Dynamic), DecodeErrors) =\n    "gleam_stdlib" "decode_list"\n}\n\nif javascript {\n  external fn decode_list(Dynamic) -> Result(List(Dynamic), DecodeErrors) =\n    "../gleam_stdlib.mjs" "decode_list"\n}\n\nif erlang {\n  external fn decode_result(Dynamic) -> Result(Result(a, e), DecodeErrors) =\n    "gleam_stdlib" "decode_result"\n}\n\nif javascript {\n  external fn decode_result(Dynamic) -> Result(Result(a, e), DecodeErrors) =\n    "../gleam_stdlib.mjs" "decode_result"\n}\n\n/// Checks to see whether a `Dynamic` value is a result of a particular type, and\n/// returns that result if it is.\n///\n/// The `ok` and `error` arguments are decoders for decoding the `Ok` and\n/// `Error` values of the result.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > from(Ok(1))\n/// > |> result(ok: int, error: string)\n/// Ok(Ok(1))\n///\n/// > from(Error("boom"))\n/// > |> result(ok: int, error: string)\n/// Ok(Error("boom"))\n///\n/// > from(123)\n/// > |> result(ok: int, error: string)\n/// Error([DecodeError(expected: "2 element tuple", found: "Int", path: [])])\n/// ```\n///\npub fn result(\n  ok decode_ok: Decoder(a),\n  error decode_error: Decoder(e),\n) -> Decoder(Result(a, e)) {\n  fn(value) {\n    try inner_result = decode_result(value)\n\n    case inner_result {\n      Ok(raw) -> {\n        try value =\n          decode_ok(raw)\n          |> map_errors(push_path(_, "ok"))\n        Ok(Ok(value))\n      }\n      Error(raw) -> {\n        try value =\n          decode_error(raw)\n          |> map_errors(push_path(_, "error"))\n        Ok(Error(value))\n      }\n    }\n  }\n}\n\n/// Checks to see whether a `Dynamic` value is a list of a particular type, and\n/// returns that list if it is.\n///\n/// The second argument is a decoder function used to decode the elements of\n/// the list. The list is only decoded if all elements in the list can be\n/// successfully decoded using this function.\n///\n/// If you do not wish to decode all the elements in the list use the `list`\n/// function instead.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > from(["a", "b", "c"])\n/// > |> list(of: string)\n/// Ok(["a", "b", "c"])\n///\n/// > from([1, 2, 3])\n/// > |> list(of: string)\n/// Error([DecodeError(expected: "String", found: "Int", path: [])])\n///\n/// > from("ok")\n/// > |> list(of: string)\n/// Error([DecodeError(expected: "List", found: "String", path: [])])\n/// ```\n///\npub fn list(\n  of decoder_type: fn(Dynamic) -> Result(inner, DecodeErrors),\n) -> Decoder(List(inner)) {\n  fn(dynamic) {\n    try list = shallow_list(dynamic)\n    list\n    |> list.try_map(decoder_type)\n    |> map_errors(push_path(_, "*"))\n  }\n}\n\n/// Checks to see if a `Dynamic` value is a nullable version of a particular\n/// type, and returns a corresponding `Option` if it is.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > from("Hello")\n/// > |> option(string)\n/// Ok(Some("Hello"))\n///\n/// > from("Hello")\n/// > |> option(string)\n/// Ok(Some("Hello"))\n///\n/// > from(atom.from_string("null"))\n/// > |> option(string)\n/// Ok(None)\n///\n/// > from(atom.from_string("nil"))\n/// > |> option(string)\n/// Ok(None)\n///\n/// > from(atom.from_string("undefined"))\n/// > |> option(string)\n/// Ok(None)\n///\n/// > from(123)\n/// > |> option(string)\n/// Error([DecodeError(expected: "BitString", found: "Int", path: [])])\n/// ```gleam\n///\npub fn optional(of decode: Decoder(inner)) -> Decoder(Option(inner)) {\n  fn(value) { decode_optional(value, decode) }\n}\n\nif erlang {\n  external fn decode_optional(\n    Dynamic,\n    Decoder(a),\n  ) -> Result(Option(a), DecodeErrors) =\n    "gleam_stdlib" "decode_option"\n}\n\nif javascript {\n  external fn decode_optional(\n    Dynamic,\n    Decoder(a),\n  ) -> Result(Option(a), DecodeErrors) =\n    "../gleam_stdlib.mjs" "decode_option"\n}\n\n/// Checks to see if a `Dynamic` value is a map with a specific field, and returns\n/// the value of that field if it is.\n///\n/// This will not succeed on a record.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > import gleam/map\n/// > from(map.new("Hello", "World"))\n/// > |> field(named: "Hello", of: string)\n/// Ok("World")\n///\n/// > from(123)\n/// > |> field("Hello", string)\n/// Error([DecodeError(expected: "Map", found: "Int", path: [])])\n/// ```\n///\npub fn field(named name: a, of inner_type: Decoder(t)) -> Decoder(t) {\n  fn(value) {\n    value\n    |> decode_field(name)\n    |> result.then(inner_type)\n    |> map_errors(push_path(_, name))\n  }\n}\n\nif erlang {\n  external fn decode_field(Dynamic, name) -> Result(Dynamic, DecodeErrors) =\n    "gleam_stdlib" "decode_field"\n}\n\nif javascript {\n  external fn decode_field(Dynamic, name) -> Result(Dynamic, DecodeErrors) =\n    "../gleam_stdlib.mjs" "decode_field"\n}\n\n/// Checks to see if a `Dynamic` value is a tuple large enough to have a certain\n/// index, and returns the value of that index if it is.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > from(#(1, 2))\n/// > |> element(0, int)\n/// Ok(from(1))\n/// ```\n///\n/// ```gleam\n/// > from(#(1, 2))\n/// > |> element(2, int)\n/// Error([\n///   DecodeError(\n///     expected: "Tuple of at least 3 elements",\n///     found: "Tuple of 2 elements",\n///     path: [],\n///   ),\n/// ])\n/// ```\n///\npub fn element(at index: Int, of inner_type: Decoder(t)) -> Decoder(t) {\n  fn(data: Dynamic) {\n    try tuple = decode_tuple(data)\n    let size = tuple_size(tuple)\n    try data = case index >= 0 {\n      True ->\n        case index < size {\n          True -> tuple_get(tuple, index)\n          False -> at_least_decode_tuple_error(index + 1, data)\n        }\n      False ->\n        case int.absolute_value(index) <= size {\n          True -> tuple_get(tuple, size + index)\n          False -> at_least_decode_tuple_error(int.absolute_value(index), data)\n        }\n    }\n    inner_type(data)\n    |> map_errors(push_path(_, index))\n  }\n}\n\nfn exact_decode_tuple_error(size: Int, data: Dynamic) -> Result(a, DecodeErrors) {\n  let s = case size {\n    0 -> ""\n    _ -> "s"\n  }\n  let error =\n    ["Tuple of ", int.to_string(size), " element", s]\n    |> string_builder.from_strings\n    |> string_builder.to_string\n    |> DecodeError(found: classify(data), path: [])\n  Error([error])\n}\n\nfn at_least_decode_tuple_error(\n  size: Int,\n  data: Dynamic,\n) -> Result(a, DecodeErrors) {\n  let s = case size {\n    0 -> ""\n    _ -> "s"\n  }\n  let error =\n    ["Tuple of at least ", int.to_string(size), " element", s]\n    |> string_builder.from_strings\n    |> string_builder.to_string\n    |> DecodeError(found: classify(data), path: [])\n  Error([error])\n}\n\n// A tuple of unknown size\nexternal type UnknownTuple\n\nif erlang {\n  external fn decode_tuple(Dynamic) -> Result(UnknownTuple, DecodeErrors) =\n    "gleam_stdlib" "decode_tuple"\n\n  external fn tuple_get(UnknownTuple, Int) -> Result(Dynamic, DecodeErrors) =\n    "gleam_stdlib" "tuple_get"\n\n  external fn tuple_size(UnknownTuple) -> Int =\n    "gleam_stdlib" "size_of_tuple"\n}\n\nif javascript {\n  external fn decode_tuple(Dynamic) -> Result(UnknownTuple, DecodeErrors) =\n    "../gleam_stdlib.mjs" "decode_tuple"\n\n  external fn tuple_get(UnknownTuple, Int) -> Result(Dynamic, DecodeErrors) =\n    "../gleam_stdlib.mjs" "tuple_get"\n\n  external fn tuple_size(UnknownTuple) -> Int =\n    "../gleam_stdlib.mjs" "length"\n}\n\nfn tuple_errors(\n  result: Result(a, List(DecodeError)),\n  name: String,\n) -> List(DecodeError) {\n  case result {\n    Ok(_) -> []\n    Error(errors) -> list.map(errors, push_path(_, name))\n  }\n}\n\nfn assert_is_tuple(\n  value: Dynamic,\n  desired_size: Int,\n) -> Result(Nil, DecodeErrors) {\n  let expected =\n    string_builder.to_string(string_builder.from_strings([\n      "Tuple of ",\n      int.to_string(desired_size),\n      " elements",\n    ]))\n  try tuple = map_errors(decode_tuple(value), put_expected(_, expected))\n  case tuple_size(tuple) {\n    size if size == desired_size -> Ok(Nil)\n    _ -> exact_decode_tuple_error(desired_size, value)\n  }\n}\n\nfn put_expected(error: DecodeError, expected: String) -> DecodeError {\n  DecodeError(..error, expected: expected)\n}\n\nfn push_path(error: DecodeError, name: t) -> DecodeError {\n  let name = from(name)\n  let decoder = any([string, fn(x) { result.map(int(x), int.to_string) }])\n  let name = case decoder(name) {\n    Ok(name) -> name\n    Error(_) ->\n      ["<", classify(name), ">"]\n      |> string_builder.from_strings\n      |> string_builder.to_string\n  }\n  DecodeError(..error, path: [name, ..error.path])\n}\n\n/// Checks to see if a `Dynamic` value is a 2 element tuple containing\n/// specifically typed elements.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > from(#(1, 2))\n/// > |> tuple2(int, int)\n/// Ok(#(1, 2))\n///\n/// > from(#(1, 2.0))\n/// > |> tuple2(int, float)\n/// Ok(#(1, 2.0))\n///\n/// > from(#(1, 2, 3))\n/// > |> tuple2(int, float)\n/// Error([\n///   DecodeError(expected: "2 element tuple", found: "3 element tuple", path: []),\n/// ])\n///\n/// > from("")\n/// > |> tuple2(int, float)\n/// Error([DecodeError(expected: "2 element tuple", found: "String", path: [])])\n/// ```\n///\npub fn tuple2(\n  first decode1: Decoder(a),\n  second decode2: Decoder(b),\n) -> Decoder(#(a, b)) {\n  fn(value) {\n    try _ = assert_is_tuple(value, 2)\n    let #(a, b) = unsafe_coerce(value)\n    case decode1(a), decode2(b) {\n      Ok(a), Ok(b) -> Ok(#(a, b))\n      a, b ->\n        tuple_errors(a, "0")\n        |> list.append(tuple_errors(b, "1"))\n        |> Error\n    }\n  }\n}\n\n/// Checks to see if a `Dynamic` value is a 3-element tuple containing\n/// specifically typed elements.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > from(#(1, 2, 3))\n/// > |> tuple3(int, int, int)\n/// Ok(#(1, 2, 3))\n///\n/// > from(#(1, 2.0, "3"))\n/// > |> tuple3(int, float, string)\n/// Ok(#(1, 2.0, "3"))\n///\n/// > from(#(1, 2))\n/// > |> tuple3(int, float, string)\n/// Error([\n///   DecodeError(expected: "3 element tuple", found: "2 element tuple", path: [])),\n/// ])\n///\n/// > from("")\n/// > |> tuple3(int, float, string)\n/// Error([\n///   DecodeError(expected: "3 element tuple", found: "String", path: []),\n/// ])\n/// ```\n///\npub fn tuple3(\n  first decode1: Decoder(a),\n  second decode2: Decoder(b),\n  third decode3: Decoder(c),\n) -> Decoder(#(a, b, c)) {\n  fn(value) {\n    try _ = assert_is_tuple(value, 3)\n    let #(a, b, c) = unsafe_coerce(value)\n    case decode1(a), decode2(b), decode3(c) {\n      Ok(a), Ok(b), Ok(c) -> Ok(#(a, b, c))\n      a, b, c ->\n        tuple_errors(a, "0")\n        |> list.append(tuple_errors(b, "1"))\n        |> list.append(tuple_errors(c, "2"))\n        |> Error\n    }\n  }\n}\n\n/// Checks to see if a `Dynamic` value is a 4 element tuple containing\n/// specifically typed elements.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > from(#(1, 2, 3, 4))\n/// > |> tuple4(int, int, int, int)\n/// Ok(#(1, 2, 3, 4))\n///\n/// > from(#(1, 2.0, "3", 4))\n/// > |> tuple4(int, float, string, int)\n/// Ok(#(1, 2.0, "3", 4))\n///\n/// > from(#(1, 2))\n/// > |> tuple4(int, float, string, int)\n/// Error([\n///   DecodeError(expected: "4 element tuple", found: "2 element tuple", path: []),\n/// ])\n///\n/// > from("")\n/// > |> tuple4(int, float, string, int)\n/// Error([\n///   DecodeError(expected: "4 element tuple", found: "String", path: []),\n/// ])\n/// ```\n///\npub fn tuple4(\n  first decode1: Decoder(a),\n  second decode2: Decoder(b),\n  third decode3: Decoder(c),\n  fourth decode4: Decoder(d),\n) -> Decoder(#(a, b, c, d)) {\n  fn(value) {\n    try _ = assert_is_tuple(value, 4)\n    let #(a, b, c, d) = unsafe_coerce(value)\n    case decode1(a), decode2(b), decode3(c), decode4(d) {\n      Ok(a), Ok(b), Ok(c), Ok(d) -> Ok(#(a, b, c, d))\n      a, b, c, d ->\n        tuple_errors(a, "0")\n        |> list.append(tuple_errors(b, "1"))\n        |> list.append(tuple_errors(c, "2"))\n        |> list.append(tuple_errors(d, "3"))\n        |> Error\n    }\n  }\n}\n\n/// Checks to see if a `Dynamic` value is a 5-element tuple containing\n/// specifically typed elements.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > from(#(1, 2, 3, 4, 5))\n/// > |> tuple5(int, int, int, int, int)\n/// Ok(#(1, 2, 3, 4, 5))\n///\n/// > from(#(1, 2.0, "3", 4, 5))\n/// > |> tuple5(int, float, string, int, int)\n/// Ok(#(1, 2.0, "3", 4, 5))\n///\n/// > from(#(1, 2))\n/// > |> tuple5(int, float, string, int, int)\n/// Error([\n///   DecodeError(expected: "5 element tuple", found: "2 element tuple", path: [])),\n/// ])\n///\n/// > from("")\n/// > |> tuple5(int, float, string, int, int)\n/// Error([DecodeError(expected: "5 element tuple", found: "String", path: [])])\n/// ```\n///\npub fn tuple5(\n  first decode1: Decoder(a),\n  second decode2: Decoder(b),\n  third decode3: Decoder(c),\n  fourth decode4: Decoder(d),\n  fifth decode5: Decoder(e),\n) -> Decoder(#(a, b, c, d, e)) {\n  fn(value) {\n    try _ = assert_is_tuple(value, 5)\n    let #(a, b, c, d, e) = unsafe_coerce(value)\n    case decode1(a), decode2(b), decode3(c), decode4(d), decode5(e) {\n      Ok(a), Ok(b), Ok(c), Ok(d), Ok(e) -> Ok(#(a, b, c, d, e))\n      a, b, c, d, e ->\n        tuple_errors(a, "0")\n        |> list.append(tuple_errors(b, "1"))\n        |> list.append(tuple_errors(c, "2"))\n        |> list.append(tuple_errors(d, "3"))\n        |> list.append(tuple_errors(e, "4"))\n        |> Error\n    }\n  }\n}\n\n/// Checks to see if a `Dynamic` value is a 6-element tuple containing\n/// specifically typed elements.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > from(#(1, 2, 3, 4, 5, 6)) \n/// > |> tuple6(int, int, int, int, int, int)\n/// Ok(#(1, 2, 3, 4, 5, 6))\n///\n/// > from(#(1, 2.0, "3", 4, 5, 6))\n/// > |> tuple6(int, float, string, int, int)\n/// Ok(#(1, 2.0, "3", 4, 5, 6))\n///\n/// > from(#(1, 2))\n/// > |> tuple6(int, float, string, int, int, int)\n/// Error([\n///   DecodeError(expected: "6 element tuple", found: "2 element tuple", path: []),\n/// ])\n/// ```\n///\npub fn tuple6(\n  first decode1: Decoder(a),\n  second decode2: Decoder(b),\n  third decode3: Decoder(c),\n  fourth decode4: Decoder(d),\n  fifth decode5: Decoder(e),\n  sixth decode6: Decoder(f),\n) -> Decoder(#(a, b, c, d, e, f)) {\n  fn(value) {\n    try _ = assert_is_tuple(value, 6)\n    let #(a, b, c, d, e, f) = unsafe_coerce(value)\n    case decode1(a), decode2(b), decode3(c), decode4(d), decode5(e), decode6(f) {\n      Ok(a), Ok(b), Ok(c), Ok(d), Ok(e), Ok(f) -> Ok(#(a, b, c, d, e, f))\n      a, b, c, d, e, f ->\n        tuple_errors(a, "0")\n        |> list.append(tuple_errors(b, "1"))\n        |> list.append(tuple_errors(c, "2"))\n        |> list.append(tuple_errors(d, "3"))\n        |> list.append(tuple_errors(e, "4"))\n        |> list.append(tuple_errors(f, "5"))\n        |> Error\n    }\n  }\n}\n\n/// Checks to see if a `Dynamic` value is a map.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > import gleam/map\n/// > map(from(map.new()))\n/// Ok(map.new())\n///\n/// > map(from(1))\n/// Error(DecodeError(expected: "Map", found: "Int", path: []))\n///\n/// > map(from(""))\n/// Error(DecodeError(expected: "Map", found: "String", path: []))\n/// ```\n///\npub fn map(\n  of key_type: Decoder(k),\n  to value_type: Decoder(v),\n) -> Decoder(Map(k, v)) {\n  fn(value) {\n    try map = decode_map(value)\n    try pairs =\n      map\n      |> map.to_list\n      |> list.try_map(fn(pair) {\n        let #(k, v) = pair\n        try k =\n          key_type(k)\n          |> map_errors(push_path(_, "keys"))\n        try v =\n          value_type(v)\n          |> map_errors(push_path(_, "values"))\n        Ok(#(k, v))\n      })\n    Ok(map.from_list(pairs))\n  }\n}\n\nif erlang {\n  external fn decode_map(Dynamic) -> Result(Map(Dynamic, Dynamic), DecodeErrors) =\n    "gleam_stdlib" "decode_map"\n}\n\nif javascript {\n  external fn decode_map(Dynamic) -> Result(Map(Dynamic, Dynamic), DecodeErrors) =\n    "../gleam_stdlib.mjs" "decode_map"\n}\n\n/// Joins multiple decoders into one. When run they will each be tried in turn\n/// until one succeeds, or they all fail.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > import gleam/result\n/// > let bool_or_string = any(of: [\n/// >   string,\n/// >   fn(x) { result.map(bool(x), fn(_) { "a bool" }) }\n/// > ])\n/// > bool_or_string(from("ok"))\n/// Ok("ok")\n///\n/// > bool_or_string(from(True))\n/// Ok("a bool")\n///\n/// > bool_or_string(from(1))\n/// Error(DecodeError(expected: "unknown", found: "unknown", path: []))\n/// ```\n///\npub fn any(of decoders: List(Decoder(t))) -> Decoder(t) {\n  fn(data) {\n    case decoders {\n      [] ->\n        Error([\n          DecodeError(found: classify(data), expected: "another type", path: []),\n        ])\n\n      [decoder, ..decoders] ->\n        case decoder(data) {\n          Ok(decoded) -> Ok(decoded)\n          Error(_) -> any(decoders)(data)\n        }\n    }\n  }\n}\n\n/// Decode 2 values from a `Dynamic` value.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > from(#(1, 2.0, "3"))\n/// > |> decode2(MyRecord, element(0, int), element(1, float))\n/// Ok(MyRecord(1, 2.0))\n/// ```\n///\n/// ```gleam\n/// > from(#("", "", ""))\n/// > |> decode2(MyRecord, element(0, int), element(1, float))\n/// Error([\n///   DecodeError(expected: "Int", found: "String", path: ["0"]),\n///   DecodeError(expected: "Float", found: "String", path: ["1"]),\n/// ])\n/// ```\n///\npub fn decode2(\n  constructor: fn(t1, t2) -> t,\n  t1: Decoder(t1),\n  t2: Decoder(t2),\n) -> Decoder(t) {\n  fn(value) {\n    case t1(value), t2(value) {\n      Ok(a), Ok(b) -> Ok(constructor(a, b))\n      a, b -> Error(list.flatten([all_errors(a), all_errors(b)]))\n    }\n  }\n}\n\n/// Decode 3 values from a `Dynamic` value.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > from(#(1, 2.0, "3"))\n/// > |> decode3(MyRecord, element(0, int), element(1, float), element(2, string))\n/// Ok(MyRecord(1, 2.0, "3"))\n/// ```\n///\n/// ```gleam\n/// > from(#("", "", ""))\n/// > |> decode3(MyRecord, element(0, int), element(1, float), element(2, string))\n/// Error([\n///   DecodeError(expected: "Int", found: "String", path: ["0"]),\n///   DecodeError(expected: "Float", found: "String", path: ["1"]),\n/// ])\n/// ```\n///\npub fn decode3(\n  constructor: fn(t1, t2, t3) -> t,\n  t1: Decoder(t1),\n  t2: Decoder(t2),\n  t3: Decoder(t3),\n) -> Decoder(t) {\n  fn(value) {\n    case t1(value), t2(value), t3(value) {\n      Ok(a), Ok(b), Ok(c) -> Ok(constructor(a, b, c))\n      a, b, c ->\n        Error(list.flatten([all_errors(a), all_errors(b), all_errors(c)]))\n    }\n  }\n}\n\n/// Decode 4 values from a `Dynamic` value.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > from(#(1, 2.1, "3", "4"))\n/// > |> decode4(\n/// >   MyRecord,\n/// >   element(0, int),\n/// >   element(1, float),\n/// >   element(2, string),\n/// >   element(3, string),\n/// > )\n/// Ok(MyRecord(1, 2.1, "3", "4"))\n/// ```\n///\n/// ```gleam\n/// > from(#("", "", "", ""))\n/// > |> decode4(\n/// >   MyRecord,\n/// >   element(0, int),\n/// >   element(1, float),\n/// >   element(2, string),\n/// >   element(3, string),\n/// > )\n/// Error([\n///   DecodeError(expected: "Int", found: "String", path: ["0"]),\n///   DecodeError(expected: "Float", found: "String", path: ["1"]),\n/// ])\n/// ```\n///\npub fn decode4(\n  constructor: fn(t1, t2, t3, t4) -> t,\n  t1: Decoder(t1),\n  t2: Decoder(t2),\n  t3: Decoder(t3),\n  t4: Decoder(t4),\n) -> Decoder(t) {\n  fn(x: Dynamic) {\n    case t1(x), t2(x), t3(x), t4(x) {\n      Ok(a), Ok(b), Ok(c), Ok(d) -> Ok(constructor(a, b, c, d))\n      a, b, c, d ->\n        Error(list.flatten([\n          all_errors(a),\n          all_errors(b),\n          all_errors(c),\n          all_errors(d),\n        ]))\n    }\n  }\n}\n\n/// Decode 5 values from a `Dynamic` value.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > from(#(1, 2.1, "3", "4", "5"))\n/// > |> decode5(\n/// >   MyRecord,\n/// >   element(0, int),\n/// >   element(1, float),\n/// >   element(2, string),\n/// >   element(3, string),\n/// >   element(4, string),\n/// > )\n/// Ok(MyRecord(1, 2.1, "3", "4", "5"))\n/// ```\n///\n/// ```gleam\n/// > from(#("", "", "", "", ""))\n/// > |> decode5(\n/// >   MyRecord,\n/// >   element(0, int),\n/// >   element(1, float),\n/// >   element(2, string),\n/// >   element(3, string),\n/// >   element(4, string),\n/// > )\n/// Error([\n///   DecodeError(expected: "Int", found: "String", path: ["0"]),\n///   DecodeError(expected: "Float", found: "String", path: ["1"]),\n/// ])\n/// ```\n///\npub fn decode5(\n  constructor: fn(t1, t2, t3, t4, t5) -> t,\n  t1: Decoder(t1),\n  t2: Decoder(t2),\n  t3: Decoder(t3),\n  t4: Decoder(t4),\n  t5: Decoder(t5),\n) -> Decoder(t) {\n  fn(x: Dynamic) {\n    case t1(x), t2(x), t3(x), t4(x), t5(x) {\n      Ok(a), Ok(b), Ok(c), Ok(d), Ok(e) -> Ok(constructor(a, b, c, d, e))\n      a, b, c, d, e ->\n        Error(list.flatten([\n          all_errors(a),\n          all_errors(b),\n          all_errors(c),\n          all_errors(d),\n          all_errors(e),\n        ]))\n    }\n  }\n}\n\n/// Decode 6 values from a `Dynamic` value.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > from(#(1, 2.1, "3", "4", "5", "6"))\n/// > |> decode6(\n/// >   MyRecord,\n/// >   element(0, int),\n/// >   element(1, float),\n/// >   element(2, string),\n/// >   element(3, string),\n/// >   element(4, string),\n/// >   element(5, string),\n/// > )\n/// Ok(MyRecord(1, 2.1, "3", "4", "5", "6"))\n/// ```\n///\n/// ```gleam\n/// > from(#("", "", "", "", "", ""))\n/// > |> decode6(\n/// >   MyRecord,\n/// >   element(0, int),\n/// >   element(1, float),\n/// >   element(2, string),\n/// >   element(3, string),\n/// >   element(4, string),\n/// >   element(5, string),\n/// > )\n/// Error([\n///   DecodeError(expected: "Int", found: "String", path: ["0"]),\n///   DecodeError(expected: "Float", found: "String", path: ["1"]),\n/// ])\n/// ```\n///\npub fn decode6(\n  constructor: fn(t1, t2, t3, t4, t5, t6) -> t,\n  t1: Decoder(t1),\n  t2: Decoder(t2),\n  t3: Decoder(t3),\n  t4: Decoder(t4),\n  t5: Decoder(t5),\n  t6: Decoder(t6),\n) -> Decoder(t) {\n  fn(x: Dynamic) {\n    case t1(x), t2(x), t3(x), t4(x), t5(x), t6(x) {\n      Ok(a), Ok(b), Ok(c), Ok(d), Ok(e), Ok(f) ->\n        Ok(constructor(a, b, c, d, e, f))\n      a, b, c, d, e, f ->\n        Error(list.flatten([\n          all_errors(a),\n          all_errors(b),\n          all_errors(c),\n          all_errors(d),\n          all_errors(e),\n          all_errors(f),\n        ]))\n    }\n  }\n}\n\n/// Decode 7 values from a `Dynamic` value.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > from(#(1, 2.1, "3", "4", "5", "6"))\n/// > |> decode7(\n/// >   MyRecord,\n/// >   element(0, int),\n/// >   element(1, float),\n/// >   element(2, string),\n/// >   element(3, string),\n/// >   element(4, string),\n/// >   element(5, string),\n/// >   element(6, string),\n/// > )\n/// Ok(MyRecord(1, 2.1, "3", "4", "5", "6", "7"))\n/// ```\n///\n/// ```gleam\n/// > from(#("", "", "", "", "", "", ""))\n/// > |> decode7(\n/// >   MyRecord,\n/// >   element(0, int),\n/// >   element(1, float),\n/// >   element(2, string),\n/// >   element(3, string),\n/// >   element(4, string),\n/// >   element(5, string),\n/// >   element(6, string),\n/// > )\n/// Error([\n///   DecodeError(expected: "Int", found: "String", path: ["0"]),\n///   DecodeError(expected: "Float", found: "String", path: ["1"]),\n/// ])\n/// ```\n///\npub fn decode7(\n  constructor: fn(t1, t2, t3, t4, t5, t6, t7) -> t,\n  t1: Decoder(t1),\n  t2: Decoder(t2),\n  t3: Decoder(t3),\n  t4: Decoder(t4),\n  t5: Decoder(t5),\n  t6: Decoder(t6),\n  t7: Decoder(t7),\n) -> Decoder(t) {\n  fn(x: Dynamic) {\n    case t1(x), t2(x), t3(x), t4(x), t5(x), t6(x), t7(x) {\n      Ok(a), Ok(b), Ok(c), Ok(d), Ok(e), Ok(f), Ok(g) ->\n        Ok(constructor(a, b, c, d, e, f, g))\n      a, b, c, d, e, f, g ->\n        Error(list.flatten([\n          all_errors(a),\n          all_errors(b),\n          all_errors(c),\n          all_errors(d),\n          all_errors(e),\n          all_errors(f),\n          all_errors(g),\n        ]))\n    }\n  }\n}\n\n/// Decode 8 values from a `Dynamic` value.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > from(#(1, 2.1, "3", "4", "5", "6", "7", "8"))\n/// > |> decode7(\n/// >   MyRecord,\n/// >   element(0, int),\n/// >   element(1, float),\n/// >   element(2, string),\n/// >   element(3, string),\n/// >   element(4, string),\n/// >   element(5, string),\n/// >   element(6, string),\n/// >   element(7, string),\n/// > )\n/// Ok(MyRecord(1, 2.1, "3", "4", "5", "6", "7", "8"))\n/// ```\n///\n/// ```gleam\n/// > from(#("", "", "", "", "", "", "", ""))\n/// > |> decode7(\n/// >   MyRecord,\n/// >   element(0, int),\n/// >   element(1, float),\n/// >   element(2, string),\n/// >   element(3, string),\n/// >   element(4, string),\n/// >   element(5, string),\n/// >   element(6, string),\n/// >   element(7, string),\n/// > )\n/// Error([\n///   DecodeError(expected: "Int", found: "String", path: ["0"]),\n///   DecodeError(expected: "Float", found: "String", path: ["1"]),\n/// ])\n/// ```\n///\npub fn decode8(\n  constructor: fn(t1, t2, t3, t4, t5, t6, t7, t8) -> t,\n  t1: Decoder(t1),\n  t2: Decoder(t2),\n  t3: Decoder(t3),\n  t4: Decoder(t4),\n  t5: Decoder(t5),\n  t6: Decoder(t6),\n  t7: Decoder(t7),\n  t8: Decoder(t8),\n) -> Decoder(t) {\n  fn(x: Dynamic) {\n    case t1(x), t2(x), t3(x), t4(x), t5(x), t6(x), t7(x), t8(x) {\n      Ok(a), Ok(b), Ok(c), Ok(d), Ok(e), Ok(f), Ok(g), Ok(h) ->\n        Ok(constructor(a, b, c, d, e, f, g, h))\n      a, b, c, d, e, f, g, h ->\n        Error(list.flatten([\n          all_errors(a),\n          all_errors(b),\n          all_errors(c),\n          all_errors(d),\n          all_errors(e),\n          all_errors(f),\n          all_errors(g),\n          all_errors(h),\n        ]))\n    }\n  }\n}\n\nfn all_errors(result: Result(a, List(DecodeError))) -> List(DecodeError) {\n  case result {\n    Ok(_) -> []\n    Error(errors) -> errors\n  }\n}\n'},9021:(e,n,t)=>{t.r(n),t.d(n,{default:()=>i});const i='//// Strings in Gleam are UTF-8 binaries. They can be written in your code as\n//// text surrounded by `"double quotes"`.\n\nimport gleam/string_builder\nimport gleam/iterator.{Iterator}\nimport gleam/list\nimport gleam/order\nimport gleam/result\nimport gleam/option.{None, Option, Some}\n\nif erlang {\n  import gleam/dynamic.{Dynamic}\n}\n\n/// Determines if a `String` is empty.\n///\n/// ## Examples\n///\n///    > is_empty("")\n///    True\n///\n///    > is_empty("the world")\n///    False\n///\npub fn is_empty(str: String) -> Bool {\n  str == ""\n}\n\n/// Gets the number of grapheme clusters in a given `String`.\n///\n/// This function has to iterate across the whole string to count the number of\n/// graphemes, so it runs in linear time.\n///\n/// ## Examples\n///\n///    > length("Gleam")\n///    5\n///\n///    > length("ß↑e̊")\n///    3\n///\n///    > length("")\n///    0\n///\npub fn length(string: String) -> Int {\n  do_length(string)\n}\n\nif erlang {\n  external fn do_length(String) -> Int =\n    "string" "length"\n}\n\nif javascript {\n  external fn do_length(String) -> Int =\n    "../gleam_stdlib.mjs" "string_length"\n}\n\n/// Reverses a `String`.\n///\n/// This function has to iterate across the whole `String` so it runs in linear\n/// time.\n///\n/// ## Examples\n///\n///    > reverse("stressed")\n///    "desserts"\n///\npub fn reverse(string: String) -> String {\n  string\n  |> string_builder.from_string\n  |> string_builder.reverse\n  |> string_builder.to_string\n}\n\n/// Creates a new `String` by replacing all occurrences of a given substring.\n///\n/// ## Examples\n///\n///    > replace("www.example.com", each: ".", with: "-")\n///    "www-example-com"\n///\n///    > replace("a,b,c,d,e", each: ",", with: "/")\n///    "a/b/c/d/e"\n///\npub fn replace(\n  in string: String,\n  each pattern: String,\n  with substitute: String,\n) -> String {\n  string\n  |> string_builder.from_string\n  |> string_builder.replace(each: pattern, with: substitute)\n  |> string_builder.to_string\n}\n\n/// Creates a new `String` with all the graphemes in the input `String` converted to\n/// lowercase.\n///\n/// Useful for case-insensitive comparisons.\n///\n/// ## Examples\n///\n///    > lowercase("X-FILES")\n///    "x-files"\n///\npub fn lowercase(string: String) -> String {\n  do_lowercase(string)\n}\n\nif erlang {\n  external fn do_lowercase(String) -> String =\n    "string" "lowercase"\n}\n\nif javascript {\n  external fn do_lowercase(String) -> String =\n    "../gleam_stdlib.mjs" "lowercase"\n}\n\n/// Creates a new `String` with all the graphemes in the input `String` converted to\n/// uppercase.\n///\n/// Useful for case-insensitive comparisons and VIRTUAL YELLING.\n///\n/// ## Examples\n///\n///    > uppercase("skinner")\n///    "SKINNER"\n///\npub fn uppercase(string: String) -> String {\n  do_uppercase(string)\n}\n\nif erlang {\n  external fn do_uppercase(String) -> String =\n    "string" "uppercase"\n}\n\nif javascript {\n  external fn do_uppercase(String) -> String =\n    "../gleam_stdlib.mjs" "uppercase"\n}\n\n/// Compares two `String`s to see which is "larger" by comparing their graphemes.\n///\n/// This does not compare the size or length of the given `String`s.\n///\n/// ## Examples\n///\n///    > compare("Anthony", "Anthony")\n///    order.Eq\n///\n///    > compare("A", "B")\n///    order.Lt\n///\npub fn compare(a: String, b: String) -> order.Order {\n  case a == b {\n    True -> order.Eq\n    _ ->\n      case less_than(a, b) {\n        True -> order.Lt\n        _ -> order.Gt\n      }\n  }\n}\n\nif erlang {\n  external fn less_than(String, String) -> Bool =\n    "gleam_stdlib" "less_than"\n}\n\nif javascript {\n  external fn less_than(String, String) -> Bool =\n    "../gleam_stdlib.mjs" "less_than"\n}\n\n/// Takes a substring given a start and end grapheme indexes. Negative indexes\n/// are taken starting from the *end* of the list.\n///\n/// ## Examples\n///    > slice(from: "gleam", at_index: 1, length: 2)\n///    "le"\n///\n///    > slice(from: "gleam", at_index: 1, length: 10)\n///    "leam"\n///\n///    > slice(from: "gleam", at_index: 10, length: 3)\n///    ""\n///\n///    > slice(from: "gleam", at_index: -2, length: 2)\n///    "am"\n///\n///    > slice(from: "gleam", at_index: -12, length: 2)\n///    ""\n///\npub fn slice(from string: String, at_index idx: Int, length len: Int) -> String {\n  case len < 0 {\n    True -> ""\n    False ->\n      case idx < 0 {\n        True -> {\n          let translated_idx = length(string) + idx\n          case translated_idx < 0 {\n            True -> ""\n            False -> do_slice(string, translated_idx, len)\n          }\n        }\n        False -> do_slice(string, idx, len)\n      }\n  }\n}\n\nif erlang {\n  external fn do_slice(String, Int, Int) -> String =\n    "string" "slice"\n}\n\nif javascript {\n  external fn do_slice(String, Int, Int) -> String =\n    "../gleam_stdlib.mjs" "slice_string"\n}\n\n/// Drops contents of the first `String` that occur before the second `String`.\n/// If the `from` string does not contain the `before` string, `from` is returned unchanged.\n///\n/// ## Examples\n///    > crop(from: "The Lone Gunmen", before: "Lone")\n///    "Lone Gunmen"\n///\npub fn crop(from string: String, before substring: String) -> String {\n  do_crop(string, substring)\n}\n\nif erlang {\n  fn do_crop(string: String, substring: String) -> String {\n    string\n    |> erl_contains(substring)\n    |> dynamic.string()\n    |> result.unwrap(string)\n  }\n\n  external fn erl_contains(String, String) -> Dynamic =\n    "string" "find"\n}\n\nif javascript {\n  external fn do_crop(String, String) -> String =\n    "../gleam_stdlib.mjs" "crop_string"\n}\n\n/// Drops *n* graphemes from the left side of a `String`.\n///\n/// ## Examples\n///    > drop_left(from: "The Lone Gunmen", up_to: 2)\n///    "e Lone Gunmen"\n///\npub fn drop_left(from string: String, up_to num_graphemes: Int) -> String {\n  case num_graphemes < 0 {\n    True -> string\n    False -> slice(string, num_graphemes, length(string) - num_graphemes)\n  }\n}\n\n/// Drops *n* graphemes from the right side of a `String`.\n///\n/// ## Examples\n///    > drop_right(from: "Cigarette Smoking Man", up_to: 2)\n///    "Cigarette Smoking M"\n///\npub fn drop_right(from string: String, up_to num_graphemes: Int) -> String {\n  case num_graphemes < 0 {\n    True -> string\n    False -> slice(string, 0, length(string) - num_graphemes)\n  }\n}\n\n/// Checks if the first `String` contains the second.\n///\n/// ## Examples\n///\n///    > contains(does: "theory", contain: "ory")\n///    True\n///\n///    > contains(does: "theory", contain: "the")\n///    True\n///\n///    > contains(does: "theory", contain: "THE")\n///    False\n///\npub fn contains(does haystack: String, contain needle: String) -> Bool {\n  do_contains(haystack, needle)\n}\n\nif erlang {\n  fn do_contains(haystack: String, needle: String) -> Bool {\n    haystack\n    |> erl_contains(needle)\n    |> dynamic.bit_string\n    |> result.is_ok\n  }\n}\n\nif javascript {\n  fn do_contains(haystack: String, needle: String) -> Bool {\n    index_of(haystack, needle) != -1\n  }\n\n  external fn index_of(String, String) -> Int =\n    "../gleam_stdlib.mjs" "index_of"\n}\n\n/// Checks whether the first `String` starts with the second one.\n///\n/// ## Examples\n///\n///    > starts_with("theory", "ory")\n///    False\n///\npub fn starts_with(string: String, prefix: String) -> Bool {\n  do_starts_with(string, prefix)\n}\n\nif erlang {\n  external fn do_starts_with(String, String) -> Bool =\n    "gleam_stdlib" "string_starts_with"\n}\n\nif javascript {\n  external fn do_starts_with(String, String) -> Bool =\n    "../gleam_stdlib.mjs" "starts_with"\n}\n\n/// Checks whether the first `String` ends with the second one.\n///\n/// ## Examples\n///\n///    > ends_with("theory", "ory")\n///    True\n///\npub fn ends_with(string: String, suffix: String) -> Bool {\n  do_ends_with(string, suffix)\n}\n\nif erlang {\n  external fn do_ends_with(String, String) -> Bool =\n    "gleam_stdlib" "string_ends_with"\n}\n\nif javascript {\n  external fn do_ends_with(String, String) -> Bool =\n    "../gleam_stdlib.mjs" "ends_with"\n}\n\n/// Creates a list of `String`s by splitting a given string on a given substring.\n///\n/// ## Examples\n///\n///    > split("home/gleam/desktop/", on: "/")\n///    ["home", "gleam", "desktop", ""]\n///\npub fn split(x: String, on substring: String) -> List(String) {\n  x\n  |> string_builder.from_string\n  |> string_builder.split(on: substring)\n  |> list.map(with: string_builder.to_string)\n}\n\n/// Splits a `String` a single time on the given substring.\n///\n/// Returns an `Error` if substring not present.\n///\n/// ## Examples\n///\n///    > split_once("home/gleam/desktop/", on: "/")\n///    Ok(#("home", "gleam/desktop/"))\n///\n///    > split_once("home/gleam/desktop/", on: "?")\n///    Error(Nil)\n///\npub fn split_once(\n  x: String,\n  on substring: String,\n) -> Result(#(String, String), Nil) {\n  do_split_once(x, substring)\n}\n\nif erlang {\n  external fn erl_split(String, String) -> List(String) =\n    "string" "split"\n\n  fn do_split_once(\n    x: String,\n    substring: String,\n  ) -> Result(#(String, String), Nil) {\n    case erl_split(x, substring) {\n      [first, rest] -> Ok(#(first, rest))\n      _ -> Error(Nil)\n    }\n  }\n}\n\nif javascript {\n  external fn do_split_once(\n    x: String,\n    substring: String,\n  ) -> Result(#(String, String), Nil) =\n    "../gleam_stdlib.mjs" "split_once"\n}\n\n/// Creates a new `String` by joining two `String`s together.\n///\n/// This function copies both `String`s and runs in linear time. If you find\n/// yourself joining `String`s frequently consider using the [`string_builder`](../string_builder)\n/// module as it can append `String`s much faster!\n///\n/// ## Examples\n///\n///    > append(to: "butter", suffix: "fly")\n///    "butterfly"\n///\npub fn append(to first: String, suffix second: String) -> String {\n  first\n  |> string_builder.from_string\n  |> string_builder.append(second)\n  |> string_builder.to_string\n}\n\n/// Creates a new `String` by joining many `String`s together.\n///\n/// This function copies both `String`s and runs in linear time. If you find\n/// yourself joining `String`s frequently consider using the [`string_builder`](../string_builder)\n/// module as it can append `String`s much faster!\n///\n/// ## Examples\n///\n///    > concat(["never", "the", "less"])\n///    "nevertheless"\n///\npub fn concat(strings: List(String)) -> String {\n  strings\n  |> string_builder.from_strings\n  |> string_builder.to_string\n}\n\n/// Creates a new `String` by repeating a `String` a given number of times.\n///\n/// This function runs in linear time.\n///\n/// ## Examples\n///\n///    > repeat("ha", times: 3)\n///    "hahaha"\n///\npub fn repeat(string: String, times times: Int) -> String {\n  iterator.repeat(string)\n  |> iterator.take(times)\n  |> iterator.to_list\n  |> concat\n}\n\n/// Joins many `String`s together with a given separator.\n///\n/// This function runs in linear time.\n///\n/// ## Examples\n///\n///    > join(["home","evan","Desktop"], with: "/")\n///    "home/evan/Desktop"\n///\npub fn join(strings: List(String), with separator: String) -> String {\n  strings\n  |> list.intersperse(with: separator)\n  |> concat\n}\n\n/// Pads a `String` on the left until it has at least given number of graphemes.\n///\n/// ## Examples\n///\n///    > pad_left("121", to: 5, with: ".")\n///    "..121"\n///\n///    > pad_left("121", to: 3, with: ".")\n///    "121"\n///\n///    > pad_left("121", to: 2, with: ".")\n///    "121"\n///\npub fn pad_left(string: String, to desired_length: Int, with pad_string: String) {\n  let current_length = length(string)\n  let to_pad_length = desired_length - current_length\n  padding(to_pad_length, pad_string)\n  |> iterator.append(iterator.single(string))\n  |> iterator.to_list\n  |> concat\n}\n\n/// Pads a `String` on the right until it has a given length.\n///\n/// ## Examples\n///\n///    > pad_right("121", to: 5, with: ".")\n///    "121.."\n///\n///    > pad_right("121", to: 3, with: ".")\n///    "121"\n///\n///    > pad_right("121", to: 2, with: ".")\n///    "121"\n///\npub fn pad_right(\n  string: String,\n  to desired_length: Int,\n  with pad_string: String,\n) {\n  let current_length = length(string)\n  let to_pad_length = desired_length - current_length\n  iterator.single(string)\n  |> iterator.append(padding(to_pad_length, pad_string))\n  |> iterator.to_list\n  |> concat\n}\n\nfn padding(size: Int, pad_string: String) -> Iterator(String) {\n  let pad_length = length(pad_string)\n  let num_pads = size / pad_length\n  let extra = size % pad_length\n  iterator.repeat(pad_string)\n  |> iterator.take(num_pads)\n  |> iterator.append(iterator.single(slice(pad_string, 0, extra)))\n}\n\n/// Removes whitespace on both sides of a `String`.\n///\n/// ## Examples\n///\n///    > trim("  hats  \\n")\n///    "hats"\n///\npub fn trim(string: String) -> String {\n  do_trim(string)\n}\n\nif erlang {\n  fn do_trim(string: String) -> String {\n    erl_trim(string, Both)\n  }\n\n  type Direction {\n    Leading\n    Trailing\n    Both\n  }\n\n  external fn erl_trim(String, Direction) -> String =\n    "string" "trim"\n}\n\nif javascript {\n  external fn do_trim(string: String) -> String =\n    "../gleam_stdlib.mjs" "trim"\n}\n\n/// Removes whitespace on the left of a `String`.\n///\n/// ## Examples\n///\n///    > trim_left("  hats  \\n")\n///    "hats  \\n"\n///\npub fn trim_left(string: String) -> String {\n  do_trim_left(string)\n}\n\nif erlang {\n  fn do_trim_left(string: String) -> String {\n    erl_trim(string, Leading)\n  }\n}\n\nif javascript {\n  external fn do_trim_left(string: String) -> String =\n    "../gleam_stdlib.mjs" "trim_left"\n}\n\n/// Removes whitespace on the right of a `String`.\n///\n/// ## Examples\n///\n///    > trim_right("  hats  \\n")\n///    "  hats"\n///\npub fn trim_right(string: String) -> String {\n  do_trim_right(string)\n}\n\nif erlang {\n  fn do_trim_right(string: String) -> String {\n    erl_trim(string, Trailing)\n  }\n}\n\nif javascript {\n  external fn do_trim_right(string: String) -> String =\n    "../gleam_stdlib.mjs" "trim_right"\n}\n\n/// Splits a non-empty `String` into its head and tail. This lets you\n/// pattern match on `String`s exactly as you would with lists.\n///\n/// ## Examples\n///    > pop_grapheme("gleam")\n///    Ok(#("g", "leam"))\n///\n///    > pop_grapheme("")\n///    Error(Nil)\n///\npub fn pop_grapheme(string: String) -> Result(#(String, String), Nil) {\n  do_pop_grapheme(string)\n}\n\nif erlang {\n  external fn do_pop_grapheme(string: String) -> Result(#(String, String), Nil) =\n    "gleam_stdlib" "string_pop_grapheme"\n}\n\nif javascript {\n  external fn do_pop_grapheme(string: String) -> Result(#(String, String), Nil) =\n    "../gleam_stdlib.mjs" "pop_grapheme"\n}\n\n/// Converts a `String` to a list of graphemes.\n///\n///    > to_graphemes("abc")\n///    ["a", "b", "c"]\n///\npub fn to_graphemes(string: String) -> List(String) {\n  case pop_grapheme(string) {\n    Ok(#(grapheme, rest)) -> [grapheme, ..to_graphemes(rest)]\n    _ -> []\n  }\n}\n\nif erlang {\n  external fn unsafe_int_to_utf_codepoint(Int) -> UtfCodepoint =\n    "gleam_stdlib" "identity"\n}\n\nif javascript {\n  external fn unsafe_int_to_utf_codepoint(Int) -> UtfCodepoint =\n    "../gleam_stdlib.mjs" "codepoint"\n}\n\n/// Converts an integer to a `UtfCodepoint`.\n///\n/// Returns an `Error` if the integer does not represent a valid UTF codepoint.\n///\npub fn utf_codepoint(value: Int) -> Result(UtfCodepoint, Nil) {\n  case value {\n    i if i > 1114111 -> Error(Nil)\n    65534 | 65535 -> Error(Nil)\n    i if i >= 55296 && i <= 57343 -> Error(Nil)\n    i -> Ok(unsafe_int_to_utf_codepoint(i))\n  }\n}\n\n/// Converts a `String` into `Option(String)` where an empty `String` becomes `None`.\n///\n/// ## Examples\n///\n/// ```gleam\n/// > to_option("")\n/// None\n/// ```\n///\n/// ```gleam\n/// > to_option("")\n/// None\n/// ```\n///\npub fn to_option(s: String) -> Option(String) {\n  case s {\n    "" -> None\n    _ -> Some(s)\n  }\n}\n'},7609:(e,n,t)=>{t.r(n),t.d(n,{default:()=>i});const i='/// `StringBuilder` is a type used for efficiently building strings.\n///\n/// When we append one string to another the strings must be copied to a\n/// new location in memory so that they can sit together. This behaviour\n/// enables efficient reading of the string but copying can be expensive,\n/// especially if we want to join many strings together.\n///\n/// `StringBuilder` is different in that it can be joined together in constant time\n/// using minimal memory, and then can be efficiently converted to a string\n/// using the `to_string` function.\n///\n/// On Erlang this type is compatible with Erlang\'s iolists. On JavaScript this\n/// type is compatible with normal strings.\n///\npub external type StringBuilder\n\n/// Prepends a `String` onto the start of some `StringBuilder`.\n///\n/// Runs in constant time.\n///\npub fn prepend(\n  to builder: StringBuilder,\n  prefix prefix: String,\n) -> StringBuilder {\n  append_builder(from_string(prefix), builder)\n}\n\n/// Appends a `String` onto the end of some `StringBuilder`.\n///\n/// Runs in constant time.\n///\npub fn append(to builder: StringBuilder, suffix second: String) -> StringBuilder {\n  append_builder(builder, from_string(second))\n}\n\n/// Prepends some `StringBuilder` onto the start of another.\n///\n/// Runs in constant time.\n///\npub fn prepend_builder(\n  to builder: StringBuilder,\n  prefix prefix: StringBuilder,\n) -> StringBuilder {\n  do_append(prefix, builder)\n}\n\n/// Appends some `StringBuilder` onto the end of another.\n///\n/// Runs in constant time.\n///\npub fn append_builder(\n  to builder: StringBuilder,\n  suffix suffix: StringBuilder,\n) -> StringBuilder {\n  do_append(builder, suffix)\n}\n\nif erlang {\n  external fn do_append(StringBuilder, StringBuilder) -> StringBuilder =\n    "gleam_stdlib" "iodata_append"\n}\n\nif javascript {\n  external fn do_append(StringBuilder, StringBuilder) -> StringBuilder =\n    "../gleam_stdlib.mjs" "add"\n}\n\n/// Converts a list of strings into a builder.\n///\n/// Runs in constant time.\n///\npub fn from_strings(strings: List(String)) -> StringBuilder {\n  do_from_strings(strings)\n}\n\nif erlang {\n  external fn do_from_strings(List(String)) -> StringBuilder =\n    "gleam_stdlib" "identity"\n}\n\nif javascript {\n  external fn do_from_strings(List(String)) -> StringBuilder =\n    "../gleam_stdlib.mjs" "join"\n}\n\n/// Joins a list of builders into a single builder.\n///\n/// Runs in constant time.\n///\npub fn concat(builders: List(StringBuilder)) -> StringBuilder {\n  do_concat(builders)\n}\n\nif erlang {\n  external fn do_concat(List(StringBuilder)) -> StringBuilder =\n    "gleam_stdlib" "identity"\n}\n\nif javascript {\n  external fn do_concat(List(StringBuilder)) -> StringBuilder =\n    "../gleam_stdlib.mjs" "join"\n}\n\n/// Converts a string into a builder.\n///\n/// Runs in constant time.\n///\npub fn from_string(string: String) -> StringBuilder {\n  do_from_string(string)\n}\n\nif erlang {\n  external fn do_from_string(String) -> StringBuilder =\n    "gleam_stdlib" "identity"\n}\n\nif javascript {\n  external fn do_from_string(String) -> StringBuilder =\n    "../gleam_stdlib.mjs" "identity"\n}\n\n/// Turns an `StringBuilder` into a `String`\n///\n/// This function is implemented natively by the virtual machine and is highly\n/// optimised.\n///\npub fn to_string(builder: StringBuilder) -> String {\n  do_to_string(builder)\n}\n\nif erlang {\n  external fn do_to_string(StringBuilder) -> String =\n    "unicode" "characters_to_binary"\n}\n\nif javascript {\n  external fn do_to_string(StringBuilder) -> String =\n    "../gleam_stdlib.mjs" "identity"\n}\n\n/// Returns the size of the `StringBuilder` in bytes.\n///\npub fn byte_size(builder: StringBuilder) -> Int {\n  do_byte_size(builder)\n}\n\nif erlang {\n  external fn do_byte_size(StringBuilder) -> Int =\n    "erlang" "iolist_size"\n}\n\nif javascript {\n  external fn do_byte_size(StringBuilder) -> Int =\n    "../gleam_stdlib.mjs" "length"\n}\n\n/// Creates a builder containing the textual representation of a given float.\n///\npub fn from_float(f: Float) -> StringBuilder {\n  do_from_float(f)\n}\n\nif erlang {\n  external fn do_from_float(Float) -> StringBuilder =\n    "io_lib_format" "fwrite_g"\n}\n\nif javascript {\n  external fn do_from_float(Float) -> StringBuilder =\n    "../gleam_stdlib.mjs" "float_to_string"\n}\n\n/// Converts a builder to a new builder where the contents have been\n/// lowercased.\n///\npub fn lowercase(builder: StringBuilder) -> StringBuilder {\n  do_lowercase(builder)\n}\n\nif erlang {\n  external fn do_lowercase(StringBuilder) -> StringBuilder =\n    "string" "lowercase"\n}\n\nif javascript {\n  external fn do_lowercase(StringBuilder) -> StringBuilder =\n    "../gleam_stdlib.mjs" "lowercase"\n}\n\n/// Converts a builder to a new builder where the contents have been\n/// uppercased.\n///\npub fn uppercase(builder: StringBuilder) -> StringBuilder {\n  do_uppercase(builder)\n}\n\nif erlang {\n  external fn do_uppercase(StringBuilder) -> StringBuilder =\n    "string" "uppercase"\n}\n\nif javascript {\n  external fn do_uppercase(StringBuilder) -> StringBuilder =\n    "../gleam_stdlib.mjs" "uppercase"\n}\n\n/// Converts a builder to a new builder with the contents reversed.\n///\npub fn reverse(builder: StringBuilder) -> StringBuilder {\n  do_reverse(builder)\n}\n\nif erlang {\n  external fn do_reverse(StringBuilder) -> StringBuilder =\n    "string" "reverse"\n}\n\nif javascript {\n  external fn do_reverse(StringBuilder) -> StringBuilder =\n    "../gleam_stdlib.mjs" "string_reverse"\n}\n\n/// Splits a builder on a given pattern into a list of builders.\n///\npub fn split(iodata: StringBuilder, on pattern: String) -> List(StringBuilder) {\n  do_split(iodata, pattern)\n}\n\nif erlang {\n  type Direction {\n    All\n  }\n\n  external fn erl_split(StringBuilder, String, Direction) -> List(StringBuilder) =\n    "string" "split"\n\n  fn do_split(iodata: StringBuilder, pattern: String) -> List(StringBuilder) {\n    erl_split(iodata, pattern, All)\n  }\n}\n\nif javascript {\n  external fn do_split(\n    builder: StringBuilder,\n    pattern: String,\n  ) -> List(StringBuilder) =\n    "../gleam_stdlib.mjs" "split"\n}\n\n/// Replaces all instances of a pattern with a given string substitute.\n///\npub fn replace(\n  in builder: StringBuilder,\n  each pattern: String,\n  with substitute: String,\n) -> StringBuilder {\n  do_replace(builder, pattern, substitute)\n}\n\nif erlang {\n  fn do_replace(\n    iodata: StringBuilder,\n    pattern: String,\n    substitute: String,\n  ) -> StringBuilder {\n    erl_replace(iodata, pattern, substitute, All)\n  }\n\n  external fn erl_replace(\n    StringBuilder,\n    String,\n    String,\n    Direction,\n  ) -> StringBuilder =\n    "string" "replace"\n}\n\nif javascript {\n  external fn do_replace(StringBuilder, String, String) -> StringBuilder =\n    "../gleam_stdlib.mjs" "string_replace"\n}\n\n/// Compares two builders to determine if they have the same textual content.\n///\n/// Comparing two iodata using the `==` operator may return `False` even if they\n/// have the same content as they may have been build in different ways, so\n/// using this function is often preferred.\n///\n/// ## Examples\n///\n///    > from_strings(["a", "b"]) == new("ab")\n///    False\n///\n///    > is_equal(from_strings(["a", "b"]), new("ab"))\n///    True\n///\n///\npub fn is_equal(a: StringBuilder, b: StringBuilder) -> Bool {\n  do_is_equal(a, b)\n}\n\nif erlang {\n  external fn do_is_equal(StringBuilder, StringBuilder) -> Bool =\n    "string" "equal"\n}\n\nif javascript {\n  external fn do_is_equal(StringBuilder, StringBuilder) -> Bool =\n    "../gleam_stdlib.mjs" "equal"\n}\n\n/// Inspects a builder to determine if it is equivalent to an empty string.\n///\n/// ## Examples\n///\n///    > new("ok") |> is_empty\n///    False\n///\n///    > new("") |> is_empty\n///    True\n///\n///    > from_strings([]) |> is_empty\n///    True\n///\n///\npub fn is_empty(builder: StringBuilder) -> Bool {\n  do_is_empty(builder)\n}\n\nif erlang {\n  external fn do_is_empty(StringBuilder) -> Bool =\n    "string" "is_empty"\n}\n\nif javascript {\n  fn do_is_empty(builder: StringBuilder) -> Bool {\n    from_string("") == builder\n  }\n}\n'}}]);